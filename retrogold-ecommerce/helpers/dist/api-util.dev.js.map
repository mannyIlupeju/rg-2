{"version":3,"sources":["api-util.js"],"names":["getAllProducts","productQuery","sanityClient","fetch","products","getAllBlogs","blogQuery","blogs","searchSanity","query","toLowerCase","sanityQuery","results","map","post","type","searchShopify","console","log","process","env","SHOPIFY_DOMAIN","method","headers","SHOPIFY_PUB","body","JSON","stringify","shopifyResponse","json","data","error","edges","node"],"mappings":";;;;;;;;;;AAAA;;;;;;;;AAGA;AACO,SAAeA,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,YADD;AAAA;AAAA,0CAIkBC,qBAAaC,KAAb,CAAmBF,YAAnB,CAJlB;;AAAA;AAICG,UAAAA,QAJD;AAAA,2CAKEA,QALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAQP;;;AACO,SAAeC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,SADD;AAAA;AAAA,0CAIeJ,qBAAaC,KAAb,CAAmBG,SAAnB,CAJf;;AAAA;AAICC,UAAAA,KAJD;AAAA,4CAKEA,KALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAUP;;;AACO,SAAeC,YAAf,CAA4BC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAGL,cAAGA,KAAK,CAACC,WAAN,OAAwB,MAA3B,EAAkC;AAChCC,YAAAA,WAAW,uEAAX;AAKD,WAND,MAMM;AACJA,YAAAA,WAAW,kDAAwCF,KAAxC,uDAAX;AAKD;;AAfI;AAAA,0CAiBiBP,qBAAaC,KAAb,CAAmBQ,WAAnB,CAjBjB;;AAAA;AAiBCC,UAAAA,OAjBD;AAAA,4CAkBEA,OAAO,CAACC,GAAR,CAAY,UAACC,IAAD;AAAA;AACjBC,cAAAA,IAAI,EAAE;AADW,eAEdD,IAFc;AAAA,WAAZ,CAlBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2BA,SAAeE,aAAf,CAA6BP,KAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLQ,UAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AADK;AAAA,0CAEyBN,KAAK,mBAAYgB,OAAO,CAACC,GAAR,CAAYC,cAAxB,gCAAmE;AACpGC,YAAAA,MAAM,EAAE,MAD4F;AAEpGC,YAAAA,OAAO,EAAE;AACP,8BAAgB,kBADT;AAEP,mDAAqCJ,OAAO,CAACC,GAAR,CAAYI;AAF1C,aAF2F;AAMpGC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBlB,cAAAA,KAAK,oEAEiCA,KAFjC;AADc,aAAf;AAN8F,WAAnE,CAF9B;;AAAA;AAECmB,UAAAA,eAFD;AAAA;AAAA,0CAmCgBA,eAAe,CAACC,IAAhB,EAnChB;;AAAA;AAAA;AAmCEC,UAAAA,IAnCF,QAmCEA,IAnCF;AAoCLb,UAAAA,OAAO,CAACC,GAAR,CAAYY,IAAZ;;AApCK,gBAsCD,CAACA,IAAD,IAAS,CAACA,IAAI,CAAC1B,QAtCd;AAAA;AAAA;AAAA;;AAuCHa,UAAAA,OAAO,CAACc,KAAR,CAAc,+BAAd,EAA+CD,IAA/C;AAvCG,4CAwCI,EAxCJ;;AAAA;AAAA,4CA2CEA,IAAI,CAAC1B,QAAL,CAAc4B,KAAd,CAAoBnB,GAApB,CAAwB;AAAA,gBAAEoB,IAAF,SAAEA,IAAF;AAAA;AAC7BlB,cAAAA,IAAI,EAAE;AADuB,eAE1BkB,IAF0B;AAAA,WAAxB,CA3CF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { sanityClient } from \"../lib/sanity\";\n\n\n//Fetch Blog data from Sanity\nexport async function getAllProducts() {\n  const productQuery = `*[_type == \"product\"]{  \n    \"slugCurrent\":slug.current,\n  }`\n  const products = await sanityClient.fetch(productQuery)\n  return products;\n}\n\n//Fetch Blog data from Sanity\nexport async function getAllBlogs() {\n  const blogQuery = `*[_type == \"blog\"]{  \n    \"slugCurrent\":slug.current,\n  }`\n  const blogs = await sanityClient.fetch(blogQuery)\n  return blogs;\n}\n\n\n\n//Fetch Search Results from Sanity \nexport async function searchSanity(query){\n  let sanityQuery;\n\n  if(query.toLowerCase() === \"blog\"){\n    sanityQuery = `*[_type == \"blog\"]{\n      title,\n      slug,\n      tag\n    }`\n  }else {\n    sanityQuery = `*[_type == \"blog\" && title match \"${query}*\"]{\n      title,\n      slug,\n      tag\n    }`\n  }\n\n  const results = await sanityClient.fetch(sanityQuery);\n  return results.map((post) => ({\n    type: 'blogPost',\n    ...post,\n  }));\n\n}\n\n\n\nexport async function searchShopify(query){\n  console.log(query);\n  const shopifyResponse = await fetch(`https://${process.env.SHOPIFY_DOMAIN}/api/2023-10/graphql.json`, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Shopify-Storefront-Access-Token': process.env.SHOPIFY_PUB\n    },\n    body: JSON.stringify({\n      query: `\n        {\n          products(first:5, query:\"title:'${query}'\") {\n            edges {\n              node {\n                id\n                title\n                handle\n                vendor\n                descriptionHtml\n                images(first: 4) {\n                edges {\n                node {\n                  originalSrc\n                  altText\n                }\n              }\n            }\n              }\n            }\n          }\n        }\n      `,\n    }),\n  });\n\n  const {data} = await shopifyResponse.json();\n  console.log(data)\n\n  if (!data || !data.products) {\n    console.error('No data returned from Shopify', data);\n    return [];\n  }\n\n  return data.products.edges.map(({node}) => ({\n    type: 'product',\n    ...node,\n  }))\n  \n}"],"file":"api-util.dev.js"}