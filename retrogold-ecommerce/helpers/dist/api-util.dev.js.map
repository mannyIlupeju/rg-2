{"version":3,"sources":["api-util.js"],"names":["getAllProducts","productQuery","sanityClient","fetch","products","getAllBlogs","blogQuery","blogs","getFilteredProducts","userSearch","slugifiedSearch","toLowerCase","replaceAll","productSearch","filteredProduct","filter","product","slugCurrent","getFilteredBlogs","blogSearch","filteredBlog","blog","searchSanity","query","sanityQuery","results","map","post","type"],"mappings":";;;;;;;;;;;AACA;;;;;;;;AAGA;AACO,SAAeA,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,YADD;AAAA;AAAA,0CAIkBC,qBAAaC,KAAb,CAAmBF,YAAnB,CAJlB;;AAAA;AAICG,UAAAA,QAJD;AAAA,2CAKEA,QALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAQP;;;AACO,SAAeC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,SADD;AAAA;AAAA,0CAIeJ,qBAAaC,KAAb,CAAmBG,SAAnB,CAJf;;AAAA;AAICC,UAAAA,KAJD;AAAA,4CAKEA,KALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAWP;;;AACO,SAAeC,mBAAf,CAAmCC,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,eADD,GACmBD,UAAU,CAACE,WAAX,GAAyBC,UAAzB,CAAoC,GAApC,EAAyC,GAAzC,CADnB;AAAA;AAAA,0CAEuBZ,cAAc,EAFrC;;AAAA;AAECa,UAAAA,aAFD;AAGCC,UAAAA,eAHD,GAGmBD,aAAa,CAACE,MAAd,CAAqB,UAACC,OAAD;AAAA,mBAAaN,eAAe,KAAKM,OAAO,CAACC,WAAzC;AAAA,WAArB,CAHnB;AAAA,4CAKEH,eALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAQP;;;AACO,SAAeI,gBAAf,CAAgCT,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,eADD,GACmBD,UAAU,CAACE,WAAX,GAAyBC,UAAzB,CAAoC,GAApC,EAAyC,GAAzC,CADnB;AAAA;AAAA,0CAEoBP,WAAW,EAF/B;;AAAA;AAECc,UAAAA,UAFD;AAKCC,UAAAA,YALD,GAKeD,UAAU,CAACJ,MAAX,CAAkB,UAACM,IAAD;AAAA,mBAAUX,eAAe,KAAKW,IAAI,CAACJ,WAAnC;AAAA,WAAlB,CALf;AAAA,4CAMEG,YANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAUP;;;AACO,SAAeE,YAAf,CAA4BC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,WADD,kDACoDD,KADpD;AAAA;AAAA,0CAOiBrB,qBAAaC,KAAb,CAAmBqB,WAAnB,CAPjB;;AAAA;AAOCC,UAAAA,OAPD;AAAA,4CAQEA,OAAO,CAACC,GAAR,CAAY,UAACC,IAAD;AAAA;AACjBC,cAAAA,IAAI,EAAE;AADW,eAEdD,IAFc;AAAA,WAAZ,CARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\nimport { sanityClient } from '@/lib/dist/sanity.dev';\n\n\n//Fetch Blog data from Sanity\nexport async function getAllProducts() {\n  const productQuery = `*[_type == \"product\"]{  \n    \"slugCurrent\":slug.current,\n  }`\n  const products = await sanityClient.fetch(productQuery)\n  return products;\n}\n\n//Fetch Blog data from Sanity\nexport async function getAllBlogs() {\n  const blogQuery = `*[_type == \"blog\"]{  \n    \"slugCurrent\":slug.current,\n  }`\n  const blogs = await sanityClient.fetch(blogQuery)\n  return blogs;\n}\n\n\n\n\n//Extract the user input and check if it matches with the filterBlog slug\nexport async function getFilteredProducts(userSearch) {\n  const slugifiedSearch = userSearch.toLowerCase().replaceAll(' ', '-')\n  const productSearch = await getAllProducts();\n  const filteredProduct = productSearch.filter((product) => slugifiedSearch === product.slugCurrent)\n\n  return filteredProduct;\n}\n\n//api endpoint to fetch the filteredBlog Array \nexport async function getFilteredBlogs(userSearch) {\n  const slugifiedSearch = userSearch.toLowerCase().replaceAll(' ', '-')\n  const blogSearch = await getAllBlogs();\n  \n\n  const filteredBlog= blogSearch.filter((blog) => slugifiedSearch === blog.slugCurrent)\n  return filteredBlog;\n}\n\n\n//Fetch Search Results from Sanity \nexport async function searchSanity(query){\n  const sanityQuery = `*[_type == \"blog\" && title match \"${query}*\"]{\n   title,\n   slug,\n   tag\n  }`\n\n  const results = await sanityClient.fetch(sanityQuery);\n  return results.map((post) => ({\n    type: 'blogPost',\n    ...post,\n  }));\n\n}"],"file":"api-util.dev.js"}