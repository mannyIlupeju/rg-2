{"version":3,"sources":["api-util.js"],"names":["_sanity","require","getAllProducts","products","regeneratorRuntime","async","_context","prev","next","awrap","sanityClient","fetch","sent","abrupt","stop","getAllBlogs","blogs","_context2","searchSanity","query","sanityQuery","results","_context3","toLowerCase","concat","map","post","_objectSpread","type"],"mappings":"4KACA,IAAAA,QAAAC,QAAA,ovBAIO,SAAeC,iBAAf,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,MAAA,iEAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAJPC,QAAAA,aAAAC,MAIO,mEAAA,KAAA,EAAA,OAJPR,EAIOG,EAAAM,KAAAN,EAAAO,OAAA,SAKEV,GALF,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAQ,UASA,SAAeC,cAAf,IAAAC,EAAA,OAAAZ,mBAAAC,MAAA,SAAAY,GAAA,OAAA,OAAAA,EAAAV,KAAAU,EAAAT,MAAA,KAAA,EAAA,MAAA,8DAAAS,EAAAT,KAAA,EAAAJ,mBAAAK,MATeP,QAAAA,aAAfS,MASA,gEAAA,KAAA,EAAA,OATAK,EASAC,EAAAL,KAAAK,EAAAJ,OAAA,SATAG,GASA,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAH,UATA,SAAAI,aAAAC,GAAA,IAAAC,EAAAC,EAAA,OAAAjB,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,OAICL,EAJD,SAAAgB,EAAAI,cAICpB,mEAJD,qCAAAqB,OAAAL,EAAA,qDAAAG,EAAAd,KAAA,EAAAJ,mBAAAK,MASAC,QAAAA,aAAAC,MAAAS,IATA,KAAA,EAAA,OASAC,EATAC,EAAAV,KAAAU,EAAAT,OAAA,SASAQ,EAAAI,IAAA,SAAAC,GAAA,OAAAC,cAAA,CAAAC,KAAA,YAAAF,MATA,KAAA,EAAA,IAAA,MAAA,OAAAJ,EAAAR","file":"api-util.min.js","sourcesContent":["\nimport { sanityClient } from '@/lib/dist/sanity.dev';\n\n\n//Fetch Blog data from Sanity\nexport async function getAllProducts() {\n  const productQuery = `*[_type == \"product\"]{  \n    \"slugCurrent\":slug.current,\n  }`\n  const products = await sanityClient.fetch(productQuery)\n  return products;\n}\n\n//Fetch Blog data from Sanity\nexport async function getAllBlogs() {\n  const blogQuery = `*[_type == \"blog\"]{  \n    \"slugCurrent\":slug.current,\n  }`\n  const blogs = await sanityClient.fetch(blogQuery)\n  return blogs;\n}\n\n\n\n//Fetch Search Results from Sanity \nexport async function searchSanity(query){\n  let sanityQuery;\n\n  if(query.toLowerCase() === \"blog\"){\n    sanityQuery = `*[_type == \"blog\"]{\n      title,\n      slug,\n      tag\n    }`\n  } else {\n    sanityQuery = `*[_type == \"blog\" && title match \"${query}*\"]{\n      title,\n      slug,\n      tag\n    }`\n  }\n\n  const results = await sanityClient.fetch(sanityQuery);\n  return results.map((post) => ({\n    type: 'blogPost',\n    ...post,\n  }));\n\n}\n\n"]}