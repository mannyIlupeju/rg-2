{"version":3,"sources":["api-util.js"],"names":["_sanity","require","getAllProducts","products","regeneratorRuntime","async","_context","prev","next","awrap","sanityClient","fetch","sent","abrupt","stop","getAllBlogs","blogs","_context2","searchSanity","query","sanityQuery","results","_context3","toLowerCase","concat","post","_objectSpread","type","searchShopify","shopifyResponse","_ref","data","_context4","console","log","process","env","SHOPIFY_DOMAIN","method","headers","Content-Type","X-Shopify-Storefront-Access-Token","SHOPIFY_PUB","body","JSON","stringify","json","error","edges","map","_ref2","node"],"mappings":"gNAAA,IAAAA,QAAAC,QAAA,2uBAIO,SAAeC,iBAAf,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,MAAA,iEAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAIkBC,QAAAA,aAAaC,MAJ/B,mEAAA,KAAA,EAAA,OAICR,EAJDG,EAAAM,KAAAN,EAAAO,OAAA,SAKEV,GALF,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAQ,UASA,SAAeC,cAAf,IAAAC,EAAA,OAAAZ,mBAAAC,MAAA,SAAAY,GAAA,OAAA,OAAAA,EAAAV,KAAAU,EAAAT,MAAA,KAAA,EAAA,MAAA,8DAAAS,EAAAT,KAAA,EAAAJ,mBAAAK,MAIeC,QAAAA,aAAaC,MAJ5B,gEAAA,KAAA,EAAA,OAICK,EAJDC,EAAAL,KAAAK,EAAAJ,OAAA,SAVPG,GAUO,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAH,UATA,SAAAI,aAAAC,GAAA,IAAAC,EAAAC,EAAA,OAAAjB,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,OAwBHY,EAxBG,SAAAD,EAAAI,cAwBQ,mEAxBR,qCAAAC,OAAAL,EAAA,qDAAAG,EAAAd,KAAA,EAAAJ,mBAAAK,MAqCiBC,QAAAA,aAAaC,MAAMS,IArCpC,KAAA,EAAA,OAqCCC,EArCDC,EAAAV,KAAAU,EAAAT,OAAA,SASeE,EAAAA,IAAf,SAAAU,GAAA,OAAAC,cAAA,CAAAC,KAAA,YAAAF,MATA,KAAA,EAAA,IAAA,MAAA,OAAAH,EAAAR,UA+CA,SAAec,cAAcT,GAA7B,IAAAU,EAAAC,EAAAC,EAAA,OAAA3B,mBAAAC,MAAA,SAAA2B,GAAA,OAAA,OAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,KAAA,EAAA,OAtCAyB,QAAAC,IAAAf,GAsCAa,EAAAxB,KAAA,EAAAJ,mBAAAK,MAtCAE,MAAA,WAAAa,OAAAW,QAAAC,IAAAC,eAAA,6BAAA,CAAAC,OAAA,OA0CHC,QAAS,CA1CNC,eAAA,mBAAAC,oCAAAN,QAAAC,IAAAM,aAAAC,KAAAC,KAAAC,UAAA,CAAA1B,MAAA,2DAAAK,OAUPL,EAVO,wbAsCA,KAAA,EAAA,OAlCCH,EAkCDgB,EAAApB,KAAAoB,EAAAxB,KAAA,EAAAJ,mBAAAK,MA3BAoB,EAAAiB,QA2BA,KAAA,EAAA,GAAAhB,EAAAE,EAAApB,KATcmB,EASdD,EATcC,KA6CnBE,QAAQC,IAAIH,GA/DPA,GAAAA,EAAA5B,SA2BA,CAAA6B,EAAAxB,KAAA,GAAA,MAAA,OA3BAyB,QAAAc,MAAA,gCAAAhB,GA2BAC,EAAAnB,OAAA,SA3BA,IA2BA,KAAA,GAAA,OAAAmB,EAAAnB,OAAA,SA3BAkB,EAAA5B,SAAA6C,MAAAC,IAAA,SAAAC,GAAA,OAAAxB,cAAA,CAuEHC,KAAM,WAvEHuB,EAAAC,SA2BA,KAAA,GAAA,IAAA,MAAA,OAAAnB,EAAAlB","file":"api-util.min.js","sourcesContent":["import { sanityClient } from \"@/lib/sanity\";\n\n\n//Fetch Blog data from Sanity\nexport async function getAllProducts() {\n  const productQuery = `*[_type == \"product\"]{  \n    \"slugCurrent\":slug.current,\n  }`\n  const products = await sanityClient.fetch(productQuery)\n  return products;\n}\n\n//Fetch Blog data from Sanity\nexport async function getAllBlogs() {\n  const blogQuery = `*[_type == \"blog\"]{  \n    \"slugCurrent\":slug.current,\n  }`\n  const blogs = await sanityClient.fetch(blogQuery)\n  return blogs;\n}\n\n\n\n//Fetch Search Results from Sanity \nexport async function searchSanity(query){\n  let sanityQuery;\n\n  if(query.toLowerCase() === \"blog\"){\n    sanityQuery = `*[_type == \"blog\"]{\n      title,\n      slug,\n      tag\n    }`\n  }else {\n    sanityQuery = `*[_type == \"blog\" && title match \"${query}*\"]{\n      title,\n      slug,\n      tag\n    }`\n  }\n\n  const results = await sanityClient.fetch(sanityQuery);\n  return results.map((post) => ({\n    type: 'blogPost',\n    ...post,\n  }));\n\n}\n\n\n\nexport async function searchShopify(query){\n  console.log(query);\n  const shopifyResponse = await fetch(`https://${process.env.SHOPIFY_DOMAIN}/api/2023-10/graphql.json`, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Shopify-Storefront-Access-Token': process.env.SHOPIFY_PUB\n    },\n    body: JSON.stringify({\n      query: `\n        {\n          products(first:5, query:\"title:'${query}'\") {\n            edges {\n              node {\n                id\n                title\n                handle\n                vendor\n                descriptionHtml\n                images(first: 4) {\n                edges {\n                node {\n                  originalSrc\n                  altText\n                }\n              }\n            }\n              }\n            }\n          }\n        }\n      `,\n    }),\n  });\n\n  const {data} = await shopifyResponse.json();\n  console.log(data)\n\n  if (!data || !data.products) {\n    console.error('No data returned from Shopify', data);\n    return [];\n  }\n\n  return data.products.edges.map(({node}) => ({\n    type: 'product',\n    ...node,\n  }))\n  \n}"]}