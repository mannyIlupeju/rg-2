{"version":3,"sources":["api-util.js"],"names":["_sanity","require","getAllProducts","products","regeneratorRuntime","async","_context","prev","next","awrap","sanityClient","fetch","sent","abrupt","stop","getAllBlogs","blogs","_context2","searchSanity","query","sanityQuery","results","_context3","toLowerCase","concat","map","post","_objectSpread","type","searchShopify","console","log","process","env","SHOPIFY_DOMAIN","method","headers","Content-Type","X-Shopify-Storefront-Access-Token","SHOPIFY_PUB","body","JSON","stringify","shopifyResponse","json","data","edges","_ref2","node"],"mappings":"gNACA,IAAAA,QAAAC,QAAA,ovBAKO,SAAeC,iBAAf,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,MAAA,iEAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MALPC,QAAAA,aAAAC,MAKO,mEAAA,KAAA,EAAA,OALPR,EAKOG,EAAAM,KAAAN,EAAAO,OAAA,SAKEV,GALF,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAQ,UASA,SAAeC,cAAf,IAAAC,EAAA,OAAAZ,mBAAAC,MAAA,SAAAY,GAAA,OAAA,OAAAA,EAAAV,KAAAU,EAAAT,MAAA,KAAA,EAAA,MAAA,8DAAAS,EAAAT,KAAA,EAAAJ,mBAAAK,MATeP,QAAAA,aAAfS,MASA,gEAAA,KAAA,EAAA,OATAK,EASAC,EAAAL,KAAAK,EAAAJ,OAAA,SATAG,GASA,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAH,UATA,SAAAI,aAAAC,GAAA,IAAAC,EAAAC,EAAA,OAAAjB,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,OAICL,EAJD,SAAAgB,EAAAI,cAICpB,mEAJD,qCAAAqB,OAAAL,EAAA,qDAAAG,EAAAd,KAAA,EAAAJ,mBAAAK,MASAC,QAAAA,aAAAC,MAAAS,IATA,KAAA,EAAA,OASAC,EATAC,EAAAV,KAAAU,EAAAT,OAAA,SASAQ,EAAAI,IAAA,SAAAC,GAAA,OAAAC,cAAA,CAAAC,KAAA,YAAAF,MATA,KAAA,EAAA,IAAA,MAAA,OAAAJ,EAAAR,UAaCE,SAJDa,cAAAV,GAICH,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAJDc,QAAAC,IAAAZ,GAICH,EAAAA,KAAAA,EAAAA,mBAAAA,MAoCwBL,MAAK,WAAAa,OAAYQ,QAAQC,IAAIC,eAAxB,6BAAmE,CAxCjGC,OAAA,OAAAC,QAAA,CAAAC,eAAA,mBAAAC,oCAAAN,QAAAC,IAAAM,aAAAC,KAAAC,KAAAC,UAAA,CAUPvB,MAAA,2DAAAK,OAuC4CL,EAvC5C,sPANQH,KAAAA,EAAAA,OAoCA2B,EApCA3B,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAOD2B,EAAAC,QAPC5B,KAAAA,EAAAA,GAAAA,EAAAA,EAAAA,KAOD6B,EAPC7B,EAOD6B,KAiBCxB,QAAAA,IAAAA,GACawB,GAAAA,EAAA1C,SAzBba,CAAAA,EAAAA,KAAAA,GAAAA,MAAAA,OA0BJY,QAAAA,MAAI,gCAAEiB,GA1BF7B,EAAAA,OAAAA,SAyBa,IAzBbA,KAAAA,GAAAA,OAAAA,EAAAA,OAAAA,SAOD6B,EAAA1C,SAAA2C,MAAArB,IAAA,SAAAsB,GAAA,OAAApB,cAAA,CAAAC,KAAA,WAAAmB,EAAAC,SAPChC,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA","file":"api-util.min.js","sourcesContent":["\nimport { sanityClient } from '@/lib/dist/sanity.dev';\n\n\n\n//Fetch Blog data from Sanity\nexport async function getAllProducts() {\n  const productQuery = `*[_type == \"product\"]{  \n    \"slugCurrent\":slug.current,\n  }`\n  const products = await sanityClient.fetch(productQuery)\n  return products;\n}\n\n//Fetch Blog data from Sanity\nexport async function getAllBlogs() {\n  const blogQuery = `*[_type == \"blog\"]{  \n    \"slugCurrent\":slug.current,\n  }`\n  const blogs = await sanityClient.fetch(blogQuery)\n  return blogs;\n}\n\n\n\n//Fetch Search Results from Sanity \nexport async function searchSanity(query){\n  let sanityQuery;\n\n  if(query.toLowerCase() === \"blog\"){\n    sanityQuery = `*[_type == \"blog\"]{\n      title,\n      slug,\n      tag\n    }`\n  }else {\n    sanityQuery = `*[_type == \"blog\" && title match \"${query}*\"]{\n      title,\n      slug,\n      tag\n    }`\n  }\n\n  const results = await sanityClient.fetch(sanityQuery);\n  return results.map((post) => ({\n    type: 'blogPost',\n    ...post,\n  }));\n\n}\n\n\n\nexport async function searchShopify(query){\n  console.log(query);\n  const shopifyResponse = await fetch(`https://${process.env.SHOPIFY_DOMAIN}/api/2023-10/graphql.json`, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Shopify-Storefront-Access-Token': process.env.SHOPIFY_PUB\n    },\n    body: JSON.stringify({\n      query: `\n        {\n          products(first:5, query:\"title:'${query}'\") {\n            edges {\n              node {\n                id\n                title\n                handle\n                vendor\n                descriptionHtml\n              }\n            }\n          }\n        }\n      `,\n    }),\n  });\n\n  const {data} = await shopifyResponse.json();\n  console.log(data)\n\n  if (!data || !data.products) {\n    console.error('No data returned from Shopify', data);\n    return [];\n  }\n\n  return data.products.edges.map(({node}) => ({\n    type: 'product',\n    ...node,\n  }))\n  \n}"]}