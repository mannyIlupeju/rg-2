{"version":3,"sources":["api-util.js"],"names":["_sanity","require","getAllProducts","products","regeneratorRuntime","async","_context","prev","next","awrap","sanityClient","fetch","sent","abrupt","stop","getAllBlogs","blogs","_context2","productQuery","getFilteredProducts","userSearch","slugifiedSearch","toLowerCase","replaceAll","productSearch","filteredProduct","filter","product","slugCurrent","getFilteredBlogs","blogSearch","filteredBlog","_context4","blog","searchSanity","query","sanityQuery","results","_context5","concat","map","post","_objectSpread","type"],"mappings":"sQACA,IAAAA,QAAAC,QAAA,ovBAIO,SAAeC,iBAAf,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,MAAA,iEAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAIkBC,QAAAA,aAAaC,MAJ/B,mEAAA,KAAA,EAAA,OAICR,EAJDG,EAAAM,KAAAN,EAAAO,OAAA,SAKEV,GALF,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAQ,UASA,SAAeC,cAAf,IAAAC,EAAA,OAAAZ,mBAAAC,MAAA,SAAAY,GAAA,OAAA,OAAAA,EAAAV,KAAAU,EAAAT,MAAA,KAAA,EAAA,MAAA,8DAAAS,EAAAT,KAAA,EAAAJ,mBAAAK,MAIeC,QAAAA,aAAaC,MAJ5B,gEAAA,KAAA,EAAA,OAICK,EAJDC,EAAAL,KAAAK,EAAAJ,OAAA,SAVPG,GAUO,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAH,UARCI,SADDC,oBAAAC,GACCF,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OADDG,EAAAD,EAAAE,cAAAC,WAAA,IAAA,KACCL,EAAAA,KAAAA,EAAAA,mBAAAA,MADDhB,kBACCgB,KAAAA,EAAAA,OADDM,EACCN,EAAAA,KAuBAO,EAAkBD,EAAcE,OAAO,SAACC,GAAD,OAAaN,IAAoBM,EAAQC,cAvBhFV,EAAAA,OAAAA,SAGAf,GAHAe,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,UADD,SAAAW,iBAAAT,GAAA,IAAAC,EAAAS,EAAAC,EAAA,OAAA3B,mBAAAC,MAAA,SAAA2B,GAAA,OAAA,OAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,KAAA,EAAA,OAAAa,EAAAD,EAAAE,cAAAC,WAAA,IAAA,KAAAS,EAAAxB,KAAA,EAAAJ,mBAAAK,MAAAM,eAAA,KAAA,EAAA,OAAAe,EAAAE,EAAApB,KAQPmB,EAAAD,EAAAJ,OAAA,SAAAO,GAAA,OAAAZ,IAAAY,EAAAL,cAROI,EAAAnB,OAAA,SAoCEkB,GApCF,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAlB,UASA,SAAAoB,aAAAC,GAAA,IAAAC,EAAAC,EAAA,OAAAjC,mBAAAC,MAAA,SAAAiC,GAAA,OAAA,OAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,KAAA,EAAA,OAAA4B,EAAA,qCAAAG,OAAAJ,EAAA,0CAAAG,EAAA9B,KAAA,EAAAJ,mBAAAK,MAAAC,QAAAA,aAAAC,MAAAyB,IAAA,KAAA,EAAA,OAAAC,EAAAC,EAAA1B,KAAA0B,EAAAzB,OAAA,SAICG,EAJDwB,IAAA,SAAAC,GAAA,OAAAC,cAAA,CAAAC,KAAA,YA0CAF,MA1CA,KAAA,EAAA,IAAA,MAAA,OAAAH,EAAAxB","file":"api-util.min.js","sourcesContent":["\nimport { sanityClient } from '@/lib/dist/sanity.dev';\n\n\n//Fetch Blog data from Sanity\nexport async function getAllProducts() {\n  const productQuery = `*[_type == \"product\"]{  \n    \"slugCurrent\":slug.current,\n  }`\n  const products = await sanityClient.fetch(productQuery)\n  return products;\n}\n\n//Fetch Blog data from Sanity\nexport async function getAllBlogs() {\n  const blogQuery = `*[_type == \"blog\"]{  \n    \"slugCurrent\":slug.current,\n  }`\n  const blogs = await sanityClient.fetch(blogQuery)\n  return blogs;\n}\n\n\n\n\n//Extract the user input and check if it matches with the filterBlog slug\nexport async function getFilteredProducts(userSearch) {\n  const slugifiedSearch = userSearch.toLowerCase().replaceAll(' ', '-')\n  const productSearch = await getAllProducts();\n  const filteredProduct = productSearch.filter((product) => slugifiedSearch === product.slugCurrent)\n\n  return filteredProduct;\n}\n\n//api endpoint to fetch the filteredBlog Array \nexport async function getFilteredBlogs(userSearch) {\n  const slugifiedSearch = userSearch.toLowerCase().replaceAll(' ', '-')\n  const blogSearch = await getAllBlogs();\n  \n\n  const filteredBlog= blogSearch.filter((blog) => slugifiedSearch === blog.slugCurrent)\n  return filteredBlog;\n}\n\n\n//Fetch Search Results from Sanity \nexport async function searchSanity(query){\n  const sanityQuery = `*[_type == \"blog\" && title match \"${query}*\"]{\n   title,\n   slug,\n   tag\n  }`\n\n  const results = await sanityClient.fetch(sanityQuery);\n  return results.map((post) => ({\n    type: 'blogPost',\n    ...post,\n  }));\n\n}"]}