import Head from 'next/head'
import { sanityClient } from '/lib/sanity'
import Landing from '/components/Landing/Landing'
import Quotes from '/components/Quotes/Quotes'
import Experience from '/components/Experience/experience'
import Blog from '/components/Blog/Blog'
import Footer from '@/components/Shared/Footer/footer'
import Navigation from '@/components/Shared/Navigation'
import Calltoaction from '@/components/CallToAction/calltoaction'
import { useGlobalContext } from '@/ Context/context'
import RespMenu from '@/components/responsiveMenu/RespMenu'
import Login from '@/components/Authorization/Login'
import Register from '@/components/Authorization/Register'




export default function Home({hero, quote, blog, calltoAction}) {
  const {isOpenMenu, isSignIn, isUserRegistered} = useGlobalContext()
  return (
    <>
      <Head>
        <title>Retrogold</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="h-min">
        <>
          {isOpenMenu && <RespMenu/>}
          <Navigation/>
          {isSignIn && <Login/>}
          {isUserRegistered && <Register/>}
          <Landing hero={hero}/>  
          <Quotes quote={quote}/>
          <Experience/>
          <Blog blog={blog}/> 
          <Calltoaction calltoAction={calltoAction}/>
        </>
      </main>
      <Footer/> 
    </>
  )
}

//fetch the data using GROQ query
const blogQuery = `*[_type == "blog"]{
  description,
  "mainImage": main_image.asset->url,
  tag, 
  slug
}`
const heroQuery = `*[_type == 'hero']{
  headline,
  "heroImages":images.asset->url,
  _id
}`
const quoteQuery = `*[_type == 'quote']`
const calltoActionQuery = `*[_type ==  'callToAction']{
  headline, 
  sub_headline, 
  "mainImage":image.asset->url
}`


// getStaticProps works when rendering from a headless CMS
export async function getStaticProps() {
  const blog = await sanityClient.fetch(blogQuery)
  const hero = await sanityClient.fetch(heroQuery)
  const quote = await sanityClient.fetch(quoteQuery)
  const calltoAction = await sanityClient.fetch(calltoActionQuery)

  return {
    props: {
      hero,
      quote,
      blog,
      calltoAction,
    }
  }
}