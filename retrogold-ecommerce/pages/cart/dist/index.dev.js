"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getServerSideProps = getServerSideProps;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _head = _interopRequireDefault(require("next/head"));

var _image = _interopRequireDefault(require("next/image"));

var _link = _interopRequireDefault(require("next/link"));

var _Navigation = _interopRequireDefault(require("@/components/Shared/Navigation/Navigation"));

var _footer = _interopRequireDefault(require("@/components/Shared/Footer/footer"));

var _cookie = _interopRequireDefault(require("cookie"));

var _context2 = require("@/ Context/context");

var _reactRedux = require("react-redux");

var _store = require("../../store");

var _fa = require("react-icons/fa");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Cart = function Cart(_ref) {
  var cartData = _ref.cartData;
  var cartItems = (0, _reactRedux.useSelector)(function (state) {
    return state.cart;
  });
  var cartQuantity = (0, _reactRedux.useSelector)(function (state) {
    return state.totalQuantity;
  });
  var quantity = (0, _reactRedux.useSelector)(function (state) {
    return state.quantity;
  });
  var totalPrice = (0, _reactRedux.useSelector)(function (state) {
    return state.totalPrice;
  });
  var dispatch = (0, _reactRedux.useDispatch)();
  (0, _react.useEffect)(function () {
    if (cartData.data.cart.lines) {
      var fetchedCartData = cartData.data.cart.lines.edges;
      dispatch((0, _store.initializeCart)(fetchedCartData));
    }
  }, [cartData, dispatch]); // useEffect(() => {
  //   if (cartData && cartData.data && cartData.data.cart && cartData.data.cart.lines) {
  //     // Convert cartData to the format expected by your store
  //     const formattedCartData = cartData.data.cart.lines.edges.map(edge => ({
  //       id: edge.node.id,
  //       // other fields according to your cartData structure
  //     }));
  //     dispatch(initializeCart(formattedCartData));
  //   }
  // }, [cartData, dispatch]);

  function handleRemove(_id) {
    console.log(_id);
    dispatch((0, _store.onRemove)({
      _id: _id
    }));
  }

  function handleToggle(_id, value) {
    dispatch((0, _store.toggleCartItemQuantity)({
      _id: _id,
      value: value
    }));
  } // return (
  //   <>
  //     <Head>
  //       <title>Cart</title>
  //       <meta name="description" content="Generated by create next app" />
  //       <meta name="viewport" content="width=device-width, initial-scale=1" />
  //       <link rel="icon" href="/favicon.ico" />
  //     </Head>
  //     <Navigation />
  //     <main>
  //       <div className="container mx-auto px-4 sm:px-6 lg:px-8 mb-12">
  //         {cartItems.length ?
  //           <>
  //             <h1 className="text-xl sm:text-2xl md:text-3xl font-bold text-zinc-700">Your Cart</h1>
  //             <div className="flex flex-col gap-8 justify-center">
  //               {cartItems.map((items, index) => {
  //                 const { vendor, title, price, images, quantity, _id } = items
  //                 return (
  //                   <div key={index}>
  //                     <div className="flex flex-col justify-between text-zinc-700" >
  //                       <div>
  //                         <div className="flex gap-4">
  //                             <div>
  //                               <Image src={images} alt={title} width="200" height="200" className="cartImage" />
  //                             </div>
  //                             <div className="flex flex-col gap-4">
  //                               <h1 className="text-lg"><span className="font-bold">{vendor}</span></h1>
  //                               <p className="text-md ">Item: {title}</p>
  //                             <div className="flex gap-4 ">
  //                               <FaPlus className="" onClick={() => { handleToggle(_id, 'inc') }} />
  //                               <span className="text-lg">{quantity}</span>
  //                               <FaMinus className="flex" onClick={() => { handleToggle(id, 'dec') }} />
  //                             </div>
  //                             <div>
  //                               <h1 className="text-xl">${price}</h1>
  //                             </div>
  //                             <div className=" text-zinc-700 font-bold underline">
  //                               <button onClick={() => handleRemove(_id)}>
  //                                 <p>On Remove</p>
  //                               </button>
  //                             </div>
  //                           </div>
  //                         </div>
  //                       </div>
  //                     </div>
  //                   </div>
  //                 )
  //               })
  //               }
  //               <div className="flex justify-between text-zinc-700">
  //                 <h1 className="text-2xl">Subtotal</h1>
  //                 <p className="text-2xl font-bold">${totalPrice}</p>
  //               </div>
  //             </div>
  //             <div className="my-24 flex justify-end">
  //               <button className="btn">Checkout</button>
  //             </div>
  //           </>
  //           :
  //           <div className="text-center">
  //             <div className="flex justify-center">
  //               <Image src='/images/shopping-cart-10925.png' width={40} height={40} alt="shopping cart icon" />
  //             </div>
  //             <div className="mt-4">
  //               <h1 className="text-6xl font-bold text-zinc-700">Cart is Empty</h1>
  //             </div>
  //             <div className="mt-24">
  //               <button className="text-2xl btn"><Link href='/shop'>Back To Shop</Link></button>
  //             </div>
  //           </div>
  //         }
  //       </div>
  //     </main>
  //     <Footer />
  //   </>
  // );

};

var _default = Cart;
exports["default"] = _default;

function getServerSideProps(context) {
  var req, parsedCookies, cartId, query, response, cartData;
  return regeneratorRuntime.async(function getServerSideProps$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          req = context.req;
          parsedCookies = _cookie["default"].parse(req.headers.cookie || '');
          cartId = parsedCookies.cartId;
          console.log(cartId);

          if (cartId) {
            _context.next = 6;
            break;
          }

          return _context.abrupt("return", {
            props: {
              cartData: null
            }
          });

        case 6:
          _context.prev = 6;
          query = "\n            query cartQuery($cartId: ID!) {\n              cart(id: $cartId) {\n                id\n                createdAt\n                updatedAt\n                checkoutUrl\n                lines(first: 10) {\n                  edges {\n                    node {\n                      id\n                      quantity\n                      merchandise {\n                        ... on ProductVariant {\n                          id\n                          image {\n                            src\n                            altText\n                          }\n                          priceV2 {\n                            amount\n                            currencyCode\n                          }\n                          product {\n                            vendor\n                          }\n                        }\n                      }\n                      attributes {\n                        key\n                        value\n                      }\n                    }\n                  }\n                }\n                attributes {\n                  key\n                  value\n                }\n                cost {\n                  totalAmount {\n                    amount\n                    currencyCode\n                  }\n                  subtotalAmount {\n                    amount\n                    currencyCode\n                  }\n                  totalTaxAmount {\n                    amount\n                    currencyCode\n                  }\n                  totalDutyAmount {\n                    amount\n                    currencyCode\n                  }\n                }\n                buyerIdentity {\n                  email\n                  phone\n                  customer {\n                    id\n                  }\n                  countryCode\n                }\n              }\n            }\n        "; // Replace 'your GraphQL query here' with your actual query.

          _context.next = 10;
          return regeneratorRuntime.awrap(fetch("https://".concat(process.env.SHOPIFY_DOMAIN, "/api/2023-10/graphql.json"), {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Shopify-Storefront-Access-Token': process.env.SHOPIFY_PUB
            },
            body: JSON.stringify({
              query: query,
              variables: {
                cartId: cartId
              }
            })
          }));

        case 10:
          response = _context.sent;

          if (response.ok) {
            _context.next = 13;
            break;
          }

          throw new Error("HTTP error! Status: ".concat(response.status));

        case 13:
          _context.next = 15;
          return regeneratorRuntime.awrap(response.json());

        case 15:
          cartData = _context.sent;
          console.log(cartData);
          return _context.abrupt("return", {
            props: {
              cartData: cartData
            }
          });

        case 20:
          _context.prev = 20;
          _context.t0 = _context["catch"](6);
          console.error('Error fetching cart data:', _context.t0);
          return _context.abrupt("return", {
            props: {
              cartData: null
            }
          });

        case 24:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[6, 20]]);
}
//# sourceMappingURL=index.dev.js.map
