{"version":3,"sources":["index.js"],"names":["Cart","cartData","cartItems","state","cart","cartQuantity","totalQuantity","quantity","totalPrice","dispatch","data","lines","fetchedCartData","edges","handleRemove","_id","console","log","handleToggle","value","getServerSideProps","context","req","parsedCookies","Cookies","parse","headers","cookie","cartId","props","query","fetch","process","env","SHOPIFY_DOMAIN","method","SHOPIFY_PUB","body","JSON","stringify","variables","response","ok","Error","status","json","error"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Head from 'next/head'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport Navigation from '@/components/Shared/Navigation';\nimport Footer from '@/components/Shared/Footer/footer';\nimport Cookies from 'cookie';\nimport { useGlobalContext } from '@/ Context/context';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { onRemove, toggleCartItemQuantity, initializeCart } from '../../store'\n\nimport { FaMinus, FaPlus } from 'react-icons/fa';\n\n\nconst Cart = ({ cartData }) => {  \n\n  const cartItems = useSelector((state) => state.cart)\n  const cartQuantity = useSelector((state) => state.totalQuantity)\n  const quantity = useSelector((state) => state.quantity)\n  const totalPrice = useSelector((state) => state.totalPrice)\n\n  const dispatch = useDispatch();\n\n\n\n  useEffect(() => {\n    if(cartData.data.cart.lines){\n      const fetchedCartData = cartData.data.cart.lines.edges\n      \n      dispatch(initializeCart(fetchedCartData))\n    }\n  }, [cartData, dispatch])\n\n  // useEffect(() => {\n  //   if (cartData && cartData.data && cartData.data.cart && cartData.data.cart.lines) {\n  //     // Convert cartData to the format expected by your store\n  //     const formattedCartData = cartData.data.cart.lines.edges.map(edge => ({\n\n  //       id: edge.node.id,\n  //       // other fields according to your cartData structure\n  //     }));\n  //     dispatch(initializeCart(formattedCartData));\n  //   }\n  // }, [cartData, dispatch]);\n\n \n  function handleRemove(_id) {\n    console.log(_id)\n    dispatch(onRemove({ _id }))\n  }\n\n  function handleToggle(_id, value) {\n    dispatch(toggleCartItemQuantity({\n      _id,\n      value\n    }))\n  }\n\n \n\n  \n  \n\n \n\n\n\n\n  // return (\n  //   <>\n  //     <Head>\n  //       <title>Cart</title>\n  //       <meta name=\"description\" content=\"Generated by create next app\" />\n  //       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  //       <link rel=\"icon\" href=\"/favicon.ico\" />\n  //     </Head>\n  //     <Navigation />\n\n\n  //     <main>\n  //       <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 mb-12\">\n  //         {cartItems.length ?\n  //           <>\n  //             <h1 className=\"text-xl sm:text-2xl md:text-3xl font-bold text-zinc-700\">Your Cart</h1>\n            \n  //             <div className=\"flex flex-col gap-8 justify-center\">\n  //               {cartItems.map((items, index) => {\n                  \n  //                 const { vendor, title, price, images, quantity, _id } = items\n\n\n  //                 return (\n  //                   <div key={index}>\n  //                     <div className=\"flex flex-col justify-between text-zinc-700\" >\n  //                       <div>\n  //                         <div className=\"flex gap-4\">\n  //                             <div>\n  //                               <Image src={images} alt={title} width=\"200\" height=\"200\" className=\"cartImage\" />\n  //                             </div>\n  //                             <div className=\"flex flex-col gap-4\">\n  //                               <h1 className=\"text-lg\"><span className=\"font-bold\">{vendor}</span></h1>\n  //                               <p className=\"text-md \">Item: {title}</p>\n  //                             <div className=\"flex gap-4 \">\n  //                               <FaPlus className=\"\" onClick={() => { handleToggle(_id, 'inc') }} />\n  //                               <span className=\"text-lg\">{quantity}</span>\n  //                               <FaMinus className=\"flex\" onClick={() => { handleToggle(id, 'dec') }} />\n  //                             </div>\n  //                             <div>\n  //                               <h1 className=\"text-xl\">${price}</h1>\n  //                             </div>\n  //                             <div className=\" text-zinc-700 font-bold underline\">\n  //                               <button onClick={() => handleRemove(_id)}>\n  //                                 <p>On Remove</p>\n  //                               </button>\n  //                             </div>\n  //                           </div>\n  //                         </div>\n  //                       </div>\n\n                    \n\n\n  //                     </div>\n  //                   </div>\n  //                 )\n  //               })\n\n  //               }\n  //               <div className=\"flex justify-between text-zinc-700\">\n  //                 <h1 className=\"text-2xl\">Subtotal</h1>\n  //                 <p className=\"text-2xl font-bold\">${totalPrice}</p>\n  //               </div>\n  //             </div>\n  //             <div className=\"my-24 flex justify-end\">\n  //               <button className=\"btn\">Checkout</button>\n  //             </div>\n  //           </>\n  //           :\n  //           <div className=\"text-center\">\n  //             <div className=\"flex justify-center\">\n  //               <Image src='/images/shopping-cart-10925.png' width={40} height={40} alt=\"shopping cart icon\" />\n  //             </div>\n  //             <div className=\"mt-4\">\n  //               <h1 className=\"text-6xl font-bold text-zinc-700\">Cart is Empty</h1>\n  //             </div>\n  //             <div className=\"mt-24\">\n  //               <button className=\"text-2xl btn\"><Link href='/shop'>Back To Shop</Link></button>\n  //             </div>\n  //           </div>\n  //         }\n  //       </div>\n  //     </main>\n  //     <Footer />\n  //   </>\n  // );\n}\n\nexport default Cart;\n\n\n\n\n\nexport async function getServerSideProps(context){\n  const {req} = context;\n  const parsedCookies = Cookies.parse(req.headers.cookie || '');\n\n  const cartId = parsedCookies.cartId;\n  console.log(cartId);\n\n  if(!cartId) {\n    return { props: {cartData: null}}\n  }\n\n  try {\n    const query = `\n            query cartQuery($cartId: ID!) {\n              cart(id: $cartId) {\n                id\n                createdAt\n                updatedAt\n                checkoutUrl\n                lines(first: 10) {\n                  edges {\n                    node {\n                      id\n                      quantity\n                      merchandise {\n                        ... on ProductVariant {\n                          id\n                          image {\n                            src\n                            altText\n                          }\n                          priceV2 {\n                            amount\n                            currencyCode\n                          }\n                          product {\n                            vendor\n                          }\n                        }\n                      }\n                      attributes {\n                        key\n                        value\n                      }\n                    }\n                  }\n                }\n                attributes {\n                  key\n                  value\n                }\n                cost {\n                  totalAmount {\n                    amount\n                    currencyCode\n                  }\n                  subtotalAmount {\n                    amount\n                    currencyCode\n                  }\n                  totalTaxAmount {\n                    amount\n                    currencyCode\n                  }\n                  totalDutyAmount {\n                    amount\n                    currencyCode\n                  }\n                }\n                buyerIdentity {\n                  email\n                  phone\n                  customer {\n                    id\n                  }\n                  countryCode\n                }\n              }\n            }\n        `;\n    // Replace 'your GraphQL query here' with your actual query.\n\n    const response = await fetch(`https://${process.env.SHOPIFY_DOMAIN}/api/2023-10/graphql.json`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Shopify-Storefront-Access-Token': process.env.SHOPIFY_PUB,\n      },\n      body: JSON.stringify({\n        query,\n        variables: { cartId },\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    const cartData = await response.json();\n    console.log(cartData);\n    return {\n      props: { cartData },\n    };\n  } catch (error) {\n    console.error('Error fetching cart data:', error);\n    return { props: { cartData: null } };\n  }\n}\n"],"file":"index.dev.js"}