import React, {useEffect, useState} from 'react';
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import Navigation from '@/components/Shared/Navigation';
import Footer from '@/components/Shared/Footer/footer';
import RespMenu from '@/components/responsiveMenu/RespMenu'
import Cookies from 'cookie';
import { useSelector, useDispatch } from 'react-redux'
import { onRemove, toggleCartItemQuantity, initializeCart } from '../../store'
import { useGlobalContext } from '@/ Context/context'

import { FaMinus, FaPlus } from 'react-icons/fa';


const Cart = ({ cartData }) => {  

  const cartItems = useSelector((state) => state.cart)
  const cartQuantity = useSelector((state) => state.totalQuantity)
  const quantity = useSelector((state) => state.quantity)
  const totalPrice = useSelector((state) => state.totalPrice)

  const { isOpenMenu } = useGlobalContext()

  const [totalAmount, setTotalAmount] = useState(null)

  const dispatch = useDispatch();

  // const total = cartData.data.cart.cost.totalAmount;

  let cartId = cartData.data.cart.id;

 
  
  useEffect(() => {
    if(cartData.data.cart.lines){
      const fetchedCartData = cartData.data.cart.lines.edges
      
      console.log(fetchedCartData);
      const submittedData = fetchedCartData.map((item)=> ({
        merchandiseId: item.node.merchandise.id,
        price: item.node.merchandise.priceV2.amount,
        currency: item.node.merchandise.priceV2.currencyCode,
        quantity: item.node.quantity,
        image: item.node.merchandise.image.src,
        title: item.node.merchandise.product.title,
        vendor: item.node.merchandise.product.vendor,
        id: item.node.id
        
      }));
      dispatch(initializeCart(submittedData))
    }
  }, [cartData, dispatch])


 
  async function handleRemove(id) {
    try {  
        const response = await fetch('/api/shopifyCart/removeCart', {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ 
            cartId, 
            id
          })
        })

        if(response.ok){
          dispatch(onRemove({id}));  
        }

    } catch (error){
      console.error('Error sending info to shopify to remove item:', error)
    }
  }




  function handleToggle(id, value) {  
    dispatch(toggleCartItemQuantity({
      id,
      value
    }))
  }

 

  return (
    <>
      <Head>
        <title>Cart</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {isOpenMenu && <RespMenu />}

      <Navigation />
      <main>
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 mb-12 h-screen">
          {cartItems.length ?
            <>
              <h1 className="text-xl sm:text-2xl md:text-3xl font-bold text-zinc-700">Your Cart</h1>
              <div className="flex flex-col gap-8 justify-center">
                {cartItems.map((items, index) => {       
                            
                  const {image, currency, id, merchandiseId, price, quantity, title, vendor} = items
                 
                  return (
                    <div key={index}>
                      <div className="flex flex-col justify-between text-zinc-700" >
                        <div>
                          <div className="flex gap-4">
                              <div>
                                <Image src={image} alt='' width="200" height="200" className="cartImage" />
                              </div>
                              <div className="flex flex-col gap-4">
                                <h1 className="text-lg"><span className="font-bold">{vendor}</span></h1>
                                <p className="text-md ">Item: {title}</p>
                              <div className="flex gap-4 ">
                                <FaPlus className="" onClick={() => { handleToggle(id, 'inc') }} />
                                <span className="text-lg">{quantity}</span>
                                <FaMinus className="flex" onClick={() => { handleToggle(id, 'dec') }} />
                              </div>
                              <div>
                                <h1 className="text-xl">${price}</h1>
                              </div>
                              <div className=" text-zinc-700 font-bold underline">
                                <button onClick={() => handleRemove(id)}>
                                  <p>On Remove</p>
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )
                })

                }
                <div className="flex justify-between text-zinc-700">
                  <h1 className="text-2xl">Subtotal</h1>
                  <p className="text-2xl font-bold">${totalPrice}</p>
                </div>
              </div>
              <div className="my-24 flex justify-end">
                <button className="btn">Checkout</button>
              </div>
            </>
            :
            <div className="text-center">
              <div className="flex justify-center">
                <Image src='/images/shopping-cart-10925.png' width={40} height={40} alt="shopping cart icon" />
              </div>
              <div className="mt-4">
                <h1 className="text-6xl font-bold text-zinc-700">Cart is Empty</h1>
              </div>
              <div className="mt-24">
                <button className="text-2xl btn"><Link href='/shop'>Back To Shop</Link></button>
              </div>
            </div>
          }
        </div>
      </main>
      <Footer />
    </>
  );
}

export default Cart;





export async function getServerSideProps(context){
  const {req} = context;
  const parsedCookies = Cookies.parse(req.headers.cookie || '');

  const cartId = parsedCookies.cartId;
  console.log(cartId);

  if(!cartId) {
    return { props: {cartData: null}}
  }

  try {
    const query = `
            query cartQuery($cartId: ID!) {
              cart(id: $cartId) {
                id
                createdAt
                updatedAt
                checkoutUrl
                lines(first: 10) {
                  edges {
                    node {
                      id
                      quantity
                      merchandise {
                        ... on ProductVariant {
                          id
                          image {
                            src
                            altText
                          }
                          priceV2 {
                            amount
                            currencyCode
                          }
                          product {
                            vendor
                            title
                            handle
                          }
                        }
                      }
                      attributes {
                        key
                        value
                      }
                    }
                  }
                }
                attributes {
                  key
                  value
                }
                cost {
                  totalAmount {
                    amount
                    currencyCode
                  }
                  subtotalAmount {
                    amount
                    currencyCode
                  }
                  totalTaxAmount {
                    amount
                    currencyCode
                  }
                  totalDutyAmount {
                    amount
                    currencyCode
                  }
                }
                buyerIdentity {
                  email
                  phone
                  customer {
                    id
                  }
                  countryCode
                }
              }
            }
        `;
    // Replace 'your GraphQL query here' with your actual query.

    const response = await fetch(`https://${process.env.SHOPIFY_DOMAIN}/api/2023-10/graphql.json`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Storefront-Access-Token': process.env.SHOPIFY_PUB,
      },
      body: JSON.stringify({
        query,
        variables: { cartId },
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    const cartData = await response.json();
    console.log(cartData);
    return {
      props: { cartData },
    };
  } catch (error) {
    console.error('Error fetching cart data:', error);
    return { props: { cartData: null } };
  }
}
