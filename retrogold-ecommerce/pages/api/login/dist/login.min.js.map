{"version":3,"sources":["login.js"],"names":["_bcryptjs","_interopRequireDefault","require","_jsonwebtoken","_User","_mongoose","_cookies","_dotenv","handler","req","res","_req$body","email","password","userEmail","user","token","regeneratorRuntime","async","_context","prev","next","method","body","toLowerCase","trim","awrap","User","findOne","dotenv","sent","status","json","message","abrupt","bcrypt","compare","jwt","sign","id","_id","toString","process","env","JWT_SECRET","set","httpOnly","secure","maxAge","path","userId","t0","stop","config"],"mappings":"2FAAA,IAAAA,UAAAC,uBAAAC,QAAA,aACAC,cAAAF,uBAAAC,QAAA,iBACAE,MAAAH,uBAAAC,QAAA,yBACAG,UAAAJ,uBAAAC,QAAA,0BACAI,SAAAL,uBAAAC,QAAA,YACAK,QAAAN,uBAAAC,QAAA,mFASA,SAAeM,QAAQC,EAAKC,GAA5B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAVA,SAAAZ,EAAAa,OAUA,OAAAH,EAAAC,KAAA,EAAAT,EATAF,EAAAc,KAAAX,EASAD,EATAC,MAAAC,EASAF,EATAE,SAaYC,EAAYF,EAAMY,cAAcC,OAJ5CN,EAAAE,KAAA,EAAAJ,mBAAAS,MANAC,MAAAA,QAAAC,QAAA,CAAAhB,MAAAE,KAMAK,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAA,GANAQ,EAMAV,EAAAW,KAAA,CAAAX,EAAAE,KAAA,GAAA,MAAA,OALAX,EAAAqB,OAAA,KAAAC,KAAA,CAAAC,QAAA,wBAKAd,EAAAe,OAAA,UAAA,KAAA,GAAA,OAAAf,EAAAE,KAAA,GAAAJ,mBAAAS,MAAAS,UAAAA,QAAAC,QAAAvB,EAAAE,EAAAF,WAAA,KAAA,GAAA,GAAAM,EAAAW,KAAA,CAAAX,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAe,OAAA,SAAAxB,EACQqB,OAAH,KAAeC,KAAA,CADpBC,QAAA,iCAAA,KAAA,GAsBYjB,EAAQqB,cAAAA,QAAIC,KAtBxB,CAAA1B,MAAAG,EAAAH,MAAA2B,GAAAxB,EAAAyB,IAAAC,YAAAC,QAAAC,IAAAC,WAIY9B,CAAAA,UAJZ,OAO+CA,IAAAA,SAAAA,QAAAA,EAAAA,GAP/C+B,IAAA,QAAA7B,EAAA,CA+BU8B,UAAU,EA/BpBC,QAAA,EAOYhC,SAPZ,SAkCUiC,OAAQ,KAlClBC,KAQWlC,MARXL,EAAAqB,OAAA,KAAAC,KAAA,CAAAhB,MAAAA,EAAAkC,OAAAnC,EAAAyB,IAAAC,WAAAR,QAAA,qBAAAd,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAgC,GAAAhC,EAAA,MAAA,GAS+Bc,QAAAA,IAAAA,4CAAAA,EAAAA,IAAFvB,EAAAqB,OAArB,KAAAC,KAAA,CAAAC,QAAA,sCATR,KAAA,GAAAd,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAX,EAAAqB,OAAA,KAAAC,KAAA,CAAAC,QAAA,uBAAA,KAAA,GAAA,IAAA,MAAA,OAAAd,EAAAiC,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MANAvB,QAAAA,QAAOwB,UAPP,EAAAhD,UAAA,wBAaAG","file":"login.min.js","sourcesContent":["import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport User from '../../../models/User';\nimport connectDB from '../../../lib/mongoose'\nimport Cookies from 'cookies'; \nimport dotenv from 'dotenv';\n\n\ndotenv.config()\nconnectDB();\n\n\n\n\nasync function handler(req, res) {\n  if(req.method === \"POST\") {\n    try {\n      const {email, password} = req.body\n      const userEmail = email.toLowerCase().trim();\n      \n     //retrieve User from database if user is there\n      const user = await User.findOne({ email: userEmail });\n      if (!user) {\n        res.status(401).json({ message: 'User does not exist' });\n        return;\n      }\n\n      //retrieve password in the user info and confirm if it matches\n      const isValidPassword = await bcrypt.compare(password, user.password)\n\n     // If the password is invalid, return a 401 Unauthorized status code\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Incorrect email or password' });\n        \n      }\n      \n      const token = jwt.sign(\n        { email: user.email, id: user._id.toString() },\n        process.env.JWT_SECRET,\n        { expiresIn: '1h' }\n      );\n\n      \n      const cookies = new Cookies(req, res)\n      cookies.set('token', token, {\n          httpOnly: true,\n          secure: false,\n          sameSite: 'strict',\n          maxAge: 3600, // Token expiration time in seconds\n          path: '/',\n      })\n    \n      res.status(200).json({ token: token, userId: user._id.toString(),  message: 'Login successful'  })\n  \n      } catch(error){\n      console.log('Error saving token and storing in cookies', error)\n      res.status(500).json({ message: 'An internal server error occurred' });\n    }\n  } else {\n    res.status(405).json({ message: 'Method not allowed' });\n  }\n}\n\nexport default handler;"]}