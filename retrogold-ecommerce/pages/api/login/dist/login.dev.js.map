{"version":3,"sources":["login.js"],"names":["dotenv","config","handler","req","res","method","body","email","password","userEmail","toLowerCase","trim","User","findOne","user","status","json","message","bcrypt","compare","isValidPassword","token","jwt","sign","id","_id","toString","process","env","JWT_SECRET","expiresIn","cookies","Cookies","set","httpOnly","secure","sameSite","maxAge","path","userId","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAGAA,mBAAOC,MAAP;;AACA;;AAKA,SAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBACKD,GAAG,CAACE,MAAJ,KAAe,MADpB;AAAA;AAAA;AAAA;;AAAA;AAAA,sBAGgCF,GAAG,CAACG,IAHpC,EAGaC,KAHb,aAGaA,KAHb,EAGoBC,QAHpB,aAGoBA,QAHpB;AAIYC,UAAAA,SAJZ,GAIwBF,KAAK,CAACG,WAAN,GAAoBC,IAApB,EAJxB,EAMK;;AANL;AAAA,0CAOyBC,iBAAKC,OAAL,CAAa;AAAEN,YAAAA,KAAK,EAAEE;AAAT,WAAb,CAPzB;;AAAA;AAOYK,UAAAA,IAPZ;;AAAA,cAQWA,IARX;AAAA;AAAA;AAAA;;AASQV,UAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;AATR;;AAAA;AAAA;AAAA,0CAcoCC,qBAAOC,OAAP,CAAeX,QAAf,EAAyBM,IAAI,CAACN,QAA9B,CAdpC;;AAAA;AAcYY,UAAAA,eAdZ;;AAAA,cAiBWA,eAjBX;AAAA;AAAA;AAAA;;AAAA,2CAkBehB,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAlBf;;AAAA;AAsBYI,UAAAA,KAtBZ,GAsBoBC,yBAAIC,IAAJ,CACZ;AAAEhB,YAAAA,KAAK,EAAEO,IAAI,CAACP,KAAd;AAAqBiB,YAAAA,EAAE,EAAEV,IAAI,CAACW,GAAL,CAASC,QAAT;AAAzB,WADY,EAEZC,OAAO,CAACC,GAAR,CAAYC,UAFA,EAGZ;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAHY,CAtBpB;AA6BYC,UAAAA,OA7BZ,GA6BsB,IAAIC,mBAAJ,CAAY7B,GAAZ,EAAiBC,GAAjB,CA7BtB;AA8BM2B,UAAAA,OAAO,CAACE,GAAR,CAAY,OAAZ,EAAqBZ,KAArB,EAA4B;AACxBa,YAAAA,QAAQ,EAAE,IADc;AAExBC,YAAAA,MAAM,EAAE,KAFgB;AAGxBC,YAAAA,QAAQ,EAAE,QAHc;AAIxBC,YAAAA,MAAM,EAAE,IAJgB;AAIV;AACdC,YAAAA,IAAI,EAAE;AALkB,WAA5B;AAQAlC,UAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEK,YAAAA,KAAK,EAAEA,KAAT;AAAgBkB,YAAAA,MAAM,EAAEzB,IAAI,CAACW,GAAL,CAASC,QAAT,EAAxB;AAA8CT,YAAAA,OAAO,EAAE;AAAvD,WAArB;AAtCN;AAAA;;AAAA;AAAA;AAAA;AAyCMuB,UAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACArC,UAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;;AA1CN;AAAA;AAAA;;AAAA;AA6CIb,UAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;;AA7CJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;eAiDef,O","sourcesContent":["import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport User from '../../../models/User';\nimport connectDB from '../../../lib/mongoose'\nimport Cookies from 'cookies'; \nimport dotenv from 'dotenv';\n\n\ndotenv.config()\nconnectDB();\n\n\n\n\nasync function handler(req, res) {\n  if(req.method === \"POST\") {\n    try {\n      const {email, password} = req.body\n      const userEmail = email.toLowerCase().trim();\n      \n     //retrieve User from database if user is there\n      const user = await User.findOne({ email: userEmail });\n      if (!user) {\n        res.status(401).json({ message: 'User does not exist' });\n        return;\n      }\n\n      //retrieve password in the user info and confirm if it matches\n      const isValidPassword = await bcrypt.compare(password, user.password)\n\n     // If the password is invalid, return a 401 Unauthorized status code\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Incorrect email or password' });\n        \n      }\n      \n      const token = jwt.sign(\n        { email: user.email, id: user._id.toString() },\n        process.env.JWT_SECRET,\n        { expiresIn: '1h' }\n      );\n\n      \n      const cookies = new Cookies(req, res)\n      cookies.set('token', token, {\n          httpOnly: true,\n          secure: false,\n          sameSite: 'strict',\n          maxAge: 3600, // Token expiration time in seconds\n          path: '/',\n      })\n    \n      res.status(200).json({ token: token, userId: user._id.toString(),  message: 'Login successful'  })\n  \n      } catch(error){\n      console.log('Error saving token and storing in cookies', error)\n      res.status(500).json({ message: 'An internal server error occurred' });\n    }\n  } else {\n    res.status(405).json({ message: 'Method not allowed' });\n  }\n}\n\nexport default handler;"],"file":"login.dev.js"}