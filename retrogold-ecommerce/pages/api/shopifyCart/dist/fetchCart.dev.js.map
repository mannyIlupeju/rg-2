{"version":3,"sources":["fetchCart.js"],"names":["handler","req","res","method","setHeader","status","end","parsedCookies","cookie","parse","headers","cartId","json","message","query","process","env","SHOPIFY_DOMAIN","SHOPIFY_PUB","body","JSON","stringify","variables","response","data","console","error"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,SAAeA,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACRD,GAAG,CAACE,MAAJ,KAAe,MADP;AAAA;AAAA;AAAA;;AAEPD,UAAAA,GAAG,CAACE,SAAJ,CAAc,OAAd,EAAuB,CAAC,MAAD,CAAvB;AAFO,2CAGAF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,kBAA8BL,GAAG,CAACE,MAAlC,kBAHA;;AAAA;AAMLI,UAAAA,aANK,GAMWC,mBAAOC,KAAP,CAAaR,GAAG,CAACS,OAAJ,CAAYF,MAAZ,IAAsB,EAAnC,CANX;AAOLG,UAAAA,MAPK,GAOIJ,aAAa,CAACI,MAPlB;;AASX,cAAI,CAACA,MAAL,EAAa;AACbT,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqB;AAACC,cAAAA,OAAO,EAAE;AAAV,aAArB;AACC;;AAXU;AAcDC,UAAAA,KAdC;AAAA;AAAA,0CA4EgB,qCAASC,OAAO,CAACC,GAAR,CAAYC,cAArB,gCAAgE;AACnFd,YAAAA,MAAM,EAAE,MAD2E;AAEnFO,YAAAA,OAAO,EAAE;AACL,8BAAgB,kBADX;AAEL,mDAAqCK,OAAO,CAACC,GAAR,CAAYE;AAF5C,aAF0E;AAMnFC,YAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAChBP,cAAAA,KAAK,EAALA,KADgB;AAEhBQ,cAAAA,SAAS,EAAE;AAAEX,gBAAAA,MAAM,EAANA;AAAF;AAFK,aAAf;AAN8E,WAAhE,CA5EhB;;AAAA;AA4EDY,UAAAA,QA5EC;AAAA;AAAA,0CAwFYA,QAAQ,CAACX,IAAT,EAxFZ;;AAAA;AAwFDY,UAAAA,IAxFC;AAyFPtB,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBY,IAArB;AAzFO;AAAA;;AAAA;AAAA;AAAA;AA8FPC,UAAAA,OAAO,CAACC,KAAR;AA9FO,2CA+FAxB,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CA/FA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import fetch from 'node-fetch'\nimport cookie from 'cookie';\n\nexport default async function handler(req, res){   \n    if(req.method !== \"POST\"){\n        res.setHeader('Allow', ['POST']);\n        return res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n\n    const parsedCookies = cookie.parse(req.headers.cookie || '');\n    const cartId = parsedCookies.cartId;\n\n    if (!cartId) {\n    res.status(505).json({message: 'No cart Id sent'})\n    }\n\n    try {\n        const query = `\n            query cartQuery($cartId: ID!) {\n            cart(id: $cartId) {\n                id\n                createdAt\n                updatedAt\n                checkoutUrl\n                lines(first: 10) {\n                edges {\n                    node {\n                    id\n                    quantity\n                    merchandise {\n                        ... on ProductVariant {\n                        id\n                         image {\n                         src\n                         altText\n                         }\n                        }\n                    }\n                    attributes {\n                        key\n                        value\n                    }\n                    }\n                }\n                }\n                attributes {\n                key\n                value\n                }\n                cost {\n                totalAmount {\n                    amount\n                    currencyCode\n                }\n                subtotalAmount {\n                    amount\n                    currencyCode\n                }\n                totalTaxAmount {\n                    amount\n                    currencyCode\n                }\n                totalDutyAmount {\n                    amount\n                    currencyCode\n                }\n                }\n                buyerIdentity {\n                email\n                phone\n                customer {\n                    id\n                }\n                countryCode\n                }\n            }\n        }\n        `;\n\n        const response = await fetch(`${process.env.SHOPIFY_DOMAIN}/api/2023-10/graphql.json`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Shopify-Storefront-Access-Token': process.env.SHOPIFY_PUB\n            },\n            body:JSON.stringify({\n                query,\n                variables: { cartId }\n            })\n        });\n\n        const data = await response.json();\n        res.status(200).json(data)\n\n\n\n    } catch(error){\n        console.error(error)\n        return res.status(500).json({message: 'Error fetching Cart'})\n    } \n}"],"file":"fetchCart.dev.js"}