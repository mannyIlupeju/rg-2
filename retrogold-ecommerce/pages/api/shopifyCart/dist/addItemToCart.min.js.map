{"version":3,"sources":["addItemToCart.js"],"names":["_nodeFetch","_interopRequireDefault","require","handler","req","res","_req$body","cartId","lineItems","response","data","regeneratorRuntime","async","_context","prev","next","method","body","awrap","concat","process","env","SHOPIFY_DOMAIN","console","X-Shopify-Storefront-Access-Token","SHOPIFY_PUB","error","stringify","query","variables","lines","sent","json","cartLinesAdd","userErrors","length","t0","status","setHeader","end","stop"],"mappings":"4FAAA,IAAAA,WAAAC,uBAAAC,QAAA,uFAEe,SAAeC,QAAQC,EAAKC,GAA5B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GACQ,SAAfX,EAAIY,OADG,OAAAH,EAAAC,KAAA,EAAAR,EAG2BF,EAAIa,KAA1BV,EAHLD,EAGKC,OAAQC,EAHbF,EAGaE,UAHb,suDAAAK,EAAAE,KAAA,EAAAJ,mBAAAO,OAgDoB,EAAAlB,WAAA,SAAA,WAAAmB,OAAiBC,QAAQC,IAAIC,eAA7B,6BAAwE,CAkB3FZ,OAAA,OACIA,QAAA,CACAa,eAAc,mBACjBC,oCAAAJ,QAAAC,IAAAI,aAEDF,KAAQG,KAAMC,UAAA,CACjBC,MAxEE,suDAwDKC,UAAW,CAAEtB,OAAAA,EAAQuB,MAAOtB,QAxDjCK,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAA,OAgDGN,EAhDHI,EAAAkB,KAAAlB,EAAAE,KAAA,EAAAJ,mBAAAO,MAAAT,EAAAuB,QAAA,KAAA,EAAAtB,EAAAG,EAAAkB,KA2EHR,EAAAA,OAAA,KAAAS,KAAAtB,GACAA,EAAAA,MAAAA,EAAAA,KAAAuB,cAAAvB,EAAAA,KAAAuB,aAAAC,WATmD,EAA3CxB,EAAKA,KAAKuB,aAAaC,WAAWC,QAnEvCZ,QAAAG,MAAA,eAAAhB,EAAAA,KAAAuB,aAAAC,YAuECX,QAAQG,MAAM,iCAAkChB,GAvEjDG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAuB,GAAAvB,EAAA,MAAA,GA2EHU,QAAQG,MAARb,EAAAuB,IA3EG/B,EAAAgC,OAAA,KAAAL,KAAA,CAAAN,MAAA,+BAAA,KAAA,GAAAb,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAV,EAAAiC,UAAA,QAAA,CAAA,SAAAjC,EAAAgC,OAAA,KAAAE,IAAA,UAAApB,OAAAf,EAAAY,OAAA,iBAAA,KAAA,GAAA,IAAA,MAAA,OAAAH,EAAA2B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"addItemToCart.min.js","sourcesContent":["import fetch from 'node-fetch';\n\nexport default async function handler(req, res) {\n    if (req.method === \"POST\") {\n        try {\n            const { cartId, lineItems } = req.body;\n            const query = `\n                mutation addCartLines($cartId: ID!, $lines: [CartLineInput!]!) {\n                    cartLinesAdd(cartId: $cartId, lines: $lines) {\n                        cart {\n                            id\n                            lines(first: 10) {\n                                edges {\n                                    node {\n                                        id\n                                        merchandise {\n                                            ... on ProductVariant {\n                                                id\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            cost {\n                                totalAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                subtotalAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                totalTaxAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                totalDutyAmount {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                        }\n                        userErrors {\n                            field\n                            message\n                        }\n                    }\n                }\n            `;\n\n            const response = await fetch(`https://${process.env.SHOPIFY_DOMAIN}/api/2023-10/graphql.json`, {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Shopify-Storefront-Access-Token': process.env.SHOPIFY_PUB\n                },\n                body: JSON.stringify({\n                    query,\n                    variables: { cartId, lines: lineItems }\n                })\n            })\n\n            \n            \n            const data = await response.json();\n            res.status(200).json(data)\n\n            // Check if cartLinesAdd is available and has userErrors\n            if (data.data && data.data.cartLinesAdd && data.data.cartLinesAdd.userErrors) {\n                if (data.data.cartLinesAdd.userErrors.length > 0) {\n                    console.error('User errors:', data.data.cartLinesAdd.userErrors);\n                }\n            } else {\n                console.error('Unexpected response structure:', data);\n            }\n\n        } catch (error) {\n            console.error(error);\n            res.status(500).json({ error: 'Error adding items to cart' })\n        }\n    } else {\n        res.setHeader('Allow', ['POST']);\n        res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n}"]}