{"version":3,"sources":["addItemToCart.js"],"names":["_nodeFetch","_interopRequireDefault","require","handler","req","res","_req$body","cartId","lineItems","response","data","regeneratorRuntime","async","_context","prev","next","method","body","awrap","concat","process","env","SHOPIFY_DOMAIN","Content-Type","cartLinesAdd","console","userErrors","JSON","stringify","error","variables","lines","message","status","sent","json","length","t0","setHeader","end","stop"],"mappings":"4FAAA,IAAAA,WAAAC,uBAAAC,QAAA,uFAEe,SAAeC,QAAQC,EAAKC,GAA5B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GACQ,SAAfX,EAAIY,OADG,OAAAH,EAAAC,KAAA,EAAAR,EAG2BF,EAAIa,KAA1BV,EAHLD,EAGKC,OAAQC,EAHbF,EAGaE,UAHb,suDAAAK,EAAAE,KAAA,EAAAJ,mBAAAO,OAgEH,EAAAlB,WAAA,SAAA,WAAAmB,OAEAC,QAAAC,IAAAC,eAFA,6BAEA,CAjBIN,OAAQ,OAkBRN,QAAA,CACQa,eAAMC,mBACVC,oCAAwCD,QAAAA,IAAaE,aAF7DT,KAIOU,KAAAC,UAAA,CACKC,MAxET,suDAyEFC,UAAA,CAAAvB,OAAAA,EAAAwB,MAAAvB,GAhBOwB,QAAU,0BAzDfnB,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAA,OAgECkB,EAhEDpB,EAAAqB,KAAArB,EAAAE,KAAA,EAAAJ,mBAAAO,MAAAT,EAAA0B,QAAA,KAAA,EAAAzB,EAAAG,EAAAqB,KA4EHT,EAAAA,OAAA,KAAAU,KAAAzB,GACAA,EAAAA,MAAAA,EAAAA,KAAAc,cAAAd,EAAAA,KAAAc,aAAAE,WATmD,EAA3ChB,EAAKA,KAAKc,aAAaE,WAAWU,QApEvCX,QAAAI,MAAA,eAAAnB,EAAAA,KAAAc,aAAAE,YAwECD,QAAQI,MAAM,iCAAkCnB,GAxEjDG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,MAAA,GA4EHY,QAAQI,MAARhB,EAAAwB,IA5EGhC,EAAA4B,OAAA,KAAAE,KAAA,CAAAN,MAAA,+BAAA,KAAA,GAAAhB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAV,EAAAiC,UAAA,QAAA,CAAA,SAAAjC,EAAA4B,OAAA,KAAAM,IAAA,UAAApB,OAAAf,EAAAY,OAAA,iBAAA,KAAA,GAAA,IAAA,MAAA,OAAAH,EAAA2B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"addItemToCart.min.js","sourcesContent":["import fetch from 'node-fetch';\n\nexport default async function handler(req, res) {\n    if (req.method === \"POST\") {\n        try {\n            const { cartId, lineItems } = req.body;\n            const query = `\n                mutation addCartLines($cartId: ID!, $lines: [CartLineInput!]!) {\n                    cartLinesAdd(cartId: $cartId, lines: $lines) {\n                        cart {\n                            id\n                            lines(first: 10) {\n                                edges {\n                                    node {\n                                        id\n                                        merchandise {\n                                            ... on ProductVariant {\n                                                id\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            cost {\n                                totalAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                subtotalAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                totalTaxAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                totalDutyAmount {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                        }\n                        userErrors {\n                            field\n                            message\n                        }\n                    }\n                }\n            `;\n\n            const response = await fetch(`https://${process.env.SHOPIFY_DOMAIN}/api/2023-10/graphql.json`, {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Shopify-Storefront-Access-Token': process.env.SHOPIFY_PUB\n                },\n                body: JSON.stringify({\n                    query,\n                    variables: { cartId, lines: lineItems },\n                    message : \"item added to cart\"\n                })\n            })\n\n            \n            \n            const data = await response.json();\n            res.status(200).json(data)\n\n            // Check if cartLinesAdd is available and has userErrors\n            if (data.data && data.data.cartLinesAdd && data.data.cartLinesAdd.userErrors) {\n                if (data.data.cartLinesAdd.userErrors.length > 0) {\n                    console.error('User errors:', data.data.cartLinesAdd.userErrors);\n                }\n            } else {\n                console.error('Unexpected response structure:', data);\n            }\n\n        } catch (error) {\n            console.error(error);\n            res.status(500).json({ error: 'Error adding items to cart' })\n        }\n    } else {\n        res.setHeader('Allow', ['POST']);\n        res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n}"]}