{"version":3,"sources":["removeCart.js"],"names":["_nodeFetch","_interopRequireDefault","require","handler","req","res","_req$body","cartId","lineId","response","data","regeneratorRuntime","async","_context","prev","next","method","body","awrap","process","cartLinesAdd","console","error","Content-Type","X-Shopify-Storefront-Access-Token","env","SHOPIFY_PUB","JSON","stringify","query","variables","lineIds","sent","json","status","userErrors","length","t0","setHeader","end","concat","stop"],"mappings":"4FAAA,IAAAA,WAAAC,uBAAAC,QAAA,uFAEe,SAAeC,QAAQC,EAAKC,GAA5B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GACO,SAAfX,EAAIY,OADI,OAAAH,EAAAC,KAAA,EAAAR,EAGsBF,EAAIa,KAAtBV,EAHJD,EAGIC,OAAQC,EAHZF,EAGYE,OAHZ,+4CAAAK,EAAAE,KAAA,EAAAJ,mBAAAO,OAiEmBR,EAAAA,WAAAA,SAAAA,WAAAA,OAAlBS,QAA4CT,IAAKU,eAA/BV,6BAAwD,CACtEA,OAAKA,OACLW,QAAQC,CACXC,eAAA,mBACEC,oCAAAL,QAAAM,IAAAC,aAENT,KAAAU,KAAAC,UAAA,CAfOC,MAxDL,+4CAAAC,UAAA,CAAAvB,OAAAA,EAAAwB,QAAAvB,QAAAK,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAA,OAiEKN,EAjELI,EAAAmB,KAAAnB,EAAAE,KAAA,EAAAJ,mBAAAO,MAAAT,EAAAwB,QAAA,KAAA,EAAAvB,EAAAG,EAAAmB,KAAA3B,EAAA6B,OAAA,KAAAD,KAAAvB,GAiECA,EAAKA,MAAQA,EAAKA,KAAKU,cAAgBV,EAAKA,KAAKU,aAAae,WAjE/D,EAAAzB,EAAAA,KAAAU,aAAAe,WAAAC,QAAAf,QAAAC,MAAA,eAAAZ,EAAAA,KAAAU,aAAAe,YAAAd,QAAAC,MAAA,iCAAAZ,GAAAG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,MAAA,GAyEHR,EAAIiC,UAAU,QAAS,CAAC,SACxBjC,EAAI6B,OAAO,KAAKK,IAAhB,UAAAC,OAA8BpC,EAAIY,OAAlC,iBA1EG,KAAA,GAAA,IAAA,MAAA,OAAAH,EAAA4B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"removeCart.min.js","sourcesContent":["import fetch from 'node-fetch';\n\nexport default async function handler(req, res){\n    if(req.method === \"POST\"){\n        try{\n            const {cartId, lineId} = req.body;\n            const query = `\n            mutation removeCartLines($cartId: ID!, $lineIds: [ID!]!) {\n                cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n                    cart {\n                    id\n                    lines(first: 10){\n                        edges\n                        {\n                        node{\n                            quantity\n                            merchandise{\n                            ... on ProductVariant {\n                                id\n                            }\n                            }\n                        }\n                        }\n                    }\n                    cost {\n                        totalAmount {\n                        amount\n                        currencyCode\n                        }\n                        subtotalAmount {\n                        amount\n                        currencyCode\n                        }\n                        totalTaxAmount {\n                        amount\n                        currencyCode\n                        }\n                        totalDutyAmount {\n                        amount\n                        currencyCode\n                        }\n                    }\n                    }\n                    \n                    userErrors {\n                    field\n                    message\n                    }\n            }\n        }`\n        ;\n            const response = await fetch(`https://${process.env.SHOPIFY_DOMAIN}/api/2023-10/graphql.json`, {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Shopify-Storefront-Access-Token': process.env.SHOPIFY_PUB\n                },\n                body: JSON.stringify({\n                    query,\n                    variables: { cartId, lineIds: lineId}\n                })\n            })\n\n            const data = await response.json();\n            res.status(200).json(data)\n\n            // Check if cartLinesAdd is available and has userErrors\n            if (data.data && data.data.cartLinesAdd && data.data.cartLinesAdd.userErrors) {\n                if (data.data.cartLinesAdd.userErrors.length > 0) {\n                    console.error('User errors:', data.data.cartLinesAdd.userErrors);\n                }\n            } else {\n                console.error('Unexpected response structure:', data);\n            }\n        } catch{\n            res.setHeader('Allow', ['POST']);\n            res.status(405).end(`Method ${req.method} Not Allowed`);\n        }\n    }\n}\n\n"]}