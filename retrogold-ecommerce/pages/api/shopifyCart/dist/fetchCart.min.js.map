{"version":3,"sources":["fetchCart.js"],"names":["_nodeFetch","_interopRequireDefault","require","_cookie","handler","req","res","parsedCookies","cartId","response","data","regeneratorRuntime","async","_context","prev","next","method","setHeader","abrupt","status","end","concat","cookie","parse","headers","json","message","awrap","process","env","SHOPIFY_DOMAIN","Content-Type","X-Shopify-Storefront-Access-Token","SHOPIFY_PUB","body","JSON","stringify","query","variables","sent","t0","console","error","stop"],"mappings":"4FAAA,IAAAA,WAAAC,uBAAAC,QAAA,eACAC,QAAAF,uBAAAC,QAAA,mFAEe,SAAeE,QAAQC,EAAKC,GAA5B,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GACO,SAAfV,EAAIW,OADI,OAEPV,EAAIW,UAAU,QAAS,CAAC,SAFjBJ,EAAAK,OAAA,SAGAZ,EAAIa,OAAO,KAAKC,IAAhB,UAAAC,OAA8BhB,EAAIW,OAAlC,kBAHAH,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAFfR,EAAAe,QAAAA,QAAAC,MAAAlB,EAAAmB,QAAAF,QAAA,KASUd,EAASD,EAAcC,SAPlBF,EAAAa,OAAef,KAAfqB,KAAA,CAAAC,QAAA,oBAAAb,EAAAC,KAAA,EAAA,qlDAAAD,EAAAE,KAAA,GAAAJ,mBAAAgB,OAAA,EAAA3B,WAAA,SAAA,GAAAqB,OAAAO,QAAAC,IAAAC,eAAA,6BAAA,CA6EHd,OAAQ,OACRQ,QAAS,CACLO,eAAgB,mBAChBC,oCAAqCJ,QAAQC,IAAII,aAErDC,KAAKC,KAAKC,UAAU,CAChBC,MAnFD,qlDAoFCC,UAAW,CAAE9B,OAAAA,QApFd,KAAA,GAAA,OAAAC,EAAAI,EAAA0B,KAAA1B,EAAAE,KAAA,GAAAJ,mBAAAgB,MAwFYlB,EAASgB,QAxFrB,KAAA,GAwFDf,EAxFCG,EAAA0B,KAyFPjC,EAAIa,OAAO,KAAKM,KAAKf,GAzFdG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAC,KAAA,GAAAD,EAAA2B,GAAA3B,EAAA,MAAA,GA8FP4B,QAAQC,MAAR7B,EAAA2B,IA9FO3B,EAAAK,OAAA,SA+FAZ,EAAIa,OAAO,KAAKM,KAAK,CAACC,QAAS,yBA/F/B,KAAA,GAAA,IAAA,MAAA,OAAAb,EAAA8B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"fetchCart.min.js","sourcesContent":["import fetch from 'node-fetch'\nimport cookie from 'cookie';\n\nexport default async function handler(req, res){   \n    if(req.method !== \"POST\"){\n        res.setHeader('Allow', ['POST']);\n        return res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n\n    const parsedCookies = cookie.parse(req.headers.cookie || '');\n    const cartId = parsedCookies.cartId;\n\n    if (!cartId) {\n    res.status(505).json({message: 'No cart Id sent'})\n    }\n\n    try {\n        const query = `\n            query cartQuery($cartId: ID!) {\n            cart(id: $cartId) {\n                id\n                createdAt\n                updatedAt\n                checkoutUrl\n                lines(first: 10) {\n                edges {\n                    node {\n                    id\n                    quantity\n                    merchandise {\n                        ... on ProductVariant {\n                        id\n                         image {\n                         src\n                         altText\n                         }\n                        }\n                    }\n                    attributes {\n                        key\n                        value\n                    }\n                    }\n                }\n                }\n                attributes {\n                key\n                value\n                }\n                cost {\n                totalAmount {\n                    amount\n                    currencyCode\n                }\n                subtotalAmount {\n                    amount\n                    currencyCode\n                }\n                totalTaxAmount {\n                    amount\n                    currencyCode\n                }\n                totalDutyAmount {\n                    amount\n                    currencyCode\n                }\n                }\n                buyerIdentity {\n                email\n                phone\n                customer {\n                    id\n                }\n                countryCode\n                }\n            }\n        }\n        `;\n\n        const response = await fetch(`${process.env.SHOPIFY_DOMAIN}/api/2023-10/graphql.json`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Shopify-Storefront-Access-Token': process.env.SHOPIFY_PUB\n            },\n            body:JSON.stringify({\n                query,\n                variables: { cartId }\n            })\n        });\n\n        const data = await response.json();\n        res.status(200).json(data)\n\n\n\n    } catch(error){\n        console.error(error)\n        return res.status(500).json({message: 'Error fetching Cart'})\n    } \n}"]}