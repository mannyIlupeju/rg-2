{"version":3,"sources":["register.js"],"names":["_mongodb","require","_bcryptjs","_interopRequireDefault","_nodemailer","_User","_mongoose","_uuid","_dotenv","dotenv","config","verificationCode","v4","transporter","nodemailer","createTransport","service","auth","user","process","env","EMAIL_USERNAME","pass","EMAIL_PASSWORD","req","res","_req$body","email","name","password","retype","userEmail","usersname","hashedPassword","regeneratorRuntime","async","_context","prev","next","method","body","abrupt","status","json","message","toLowerCase","trim","test","awrap","bcrypt","hash","sent","User","findOne","success","create","role","console","log","data","t0","error","stop","sendVerificationEmail","_context2","from","to","subject","text","concat","html","handler"],"mappings":"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","file":"register.min.js","sourcesContent":["import { MongoClient } from 'mongodb'\nimport bcrypt from 'bcryptjs';\nimport nodemailer from 'nodemailer'\nimport User from '../../../models/User';\nimport connectDB from '../../../lib/mongoose'\nimport { v4 as uuidv4 } from 'uuid';\nimport dotenv from 'dotenv';\n\n\ndotenv.config()\n\nconst verificationCode = uuidv4();\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: process.env.EMAIL_USERNAME,\n    pass: process.env.EMAIL_PASSWORD,\n  },\n});\n\nconnectDB();\n\n\n\nasync function handler(req, res) {\n  if (req.method === \"POST\") {\n    console.log(req.body)\n    const { email, name, password, retype } = req.body;\n    \n\n    if (!name || typeof name !== 'string') {\n      return res.status(422).json({ message: 'Please provide a valid name' });\n    }\n\n    const userEmail = email.toLowerCase().trim();\n    const usersname = name.toLowerCase().trim();\n\n  \n\n    if (!userEmail || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(userEmail)) {\n      return res.status(422).json({ message: 'Please enter a correct email address' });\n    }\n\n    if (password !== retype) {\n      return res.status(422).json({ message: 'Passwords do not match' });\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n\n\n    try {\n      const existingUser = await User.findOne({ email: userEmail });\n      if (existingUser) {\n        return res.status(400).json({ success: false, message: 'User already exists' });\n      }\n\n      const user = await User.create({ name:usersname, email, password: hashedPassword, role: 'user' });\n\n      console.log(user)\n\n      await sendVerificationEmail(userEmail, verificationCode);\n\n      res.status(201).json({ success: true, data: user, message: 'Signed up! A verification email has been sent to your email address' });\n    } catch (error) {\n      res.status(500).json({ message: 'User not created', error: error.message });\n    }\n  } else {\n    res.status(405).json({ success: false, message: 'Method not allowed' })\n  }\n}\n\nasync function sendVerificationEmail(email, verificationCode) {\n  try {\n    await transporter.sendMail({\n      from: '\"Retrogold\" <pelumiilupeju@gmail.com>',\n      to: email,\n      subject: 'Verify Your Email',\n      text: `Please click the link below to verify your email:\\nhttp://your-app.com/verify-email?code=${verificationCode}`,\n      html: `<b>Please click the link below to verify your email:</b><br><a href=\"http://your-app.com/verify-email?code=${verificationCode}\">Verify Email</a>`,\n    });\n    console.log('Verification email sent successfully');\n  } catch (error) {\n    console.error('Error sending verification email:', error);\n  }\n}\n\n\n\n\n\nexport default handler;"]}