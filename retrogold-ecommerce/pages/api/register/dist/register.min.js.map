{"version":3,"sources":["register.js"],"names":["_mongodb","require","_bcryptjs","_interopRequireDefault","_nodemailer","_User","_mongoose","_uuid","_dotenv","dotenv","config","verificationCode","v4","transporter","nodemailer","createTransport","service","auth","user","process","env","EMAIL_USERNAME","pass","EMAIL_PASSWORD","handler","req","res","_req$body","email","name","password","retype","userEmail","hashedPassword","regeneratorRuntime","async","_context","prev","next","body","abrupt","status","trim","json","message","awrap","bcrypt","hash","sent","User","findOne","success","create","role","data","t0","error","stop"],"mappings":"2FAAA,IAAAA,SAAAC,QAAA,WACAC,UAAAC,uBAAAF,QAAA,aACAG,YAAAD,uBAAAF,QAAA,eACAI,MAAAF,uBAAAF,QAAA,yBACAK,UAAAH,uBAAAF,QAAA,0BACAM,MAAAN,QAAA,QACAO,QAAAL,uBAAAF,QAAA,mFAEAQ,QAAAA,QAAOC,SAEP,IAAMC,kBAAmB,EAAAJ,MAAAK,MAEnBC,YAAcC,YAAAA,QAAWC,gBAAgB,CAT/CC,QAAA,QAWEC,KAAM,CAVRC,KAAAC,QAAAC,IAAAC,eAYIC,KAAMH,QAAQC,IAAIG,kBAMtB,SAAeC,QAAQC,EAAKC,GAA5B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAf,EAAA,OAAAgB,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAdO5B,SAAPD,EAAAA,OAcA,CAAA2B,EAAAE,KAAA,GAAA,MAAA,GAAAX,EAE8CF,EAAIc,KAAtCX,EAFZD,EAEYC,MAAOC,EAFnBF,EAEmBE,KAAMC,EAFzBH,EAEyBG,SAAUC,EAFnCJ,EAEmCI,OAE1BF,GAAwB,iBAATA,EAJxB,CAAAO,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAI,OAAA,SAVM3B,EAAW4B,OAAG3B,KAAAA,KAAAA,CAAAA,QAAWC,iCAU/B,KAAA,EAAA,IAPUI,EAAYE,EAAAA,cADdqB,SAEcnB,6BAAAA,KAAAA,GAMtB,CAAAa,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAI,OAAA,SARQd,EAAAe,OAAA,KAAAE,KAAA,CAAAC,QAAA,0CAQR,KAAA,EAAA,GAFAd,IAAAC,EAEA,OAAAK,EAAAI,OAAA,SAcad,EAAIe,OAAO,KAAKE,KAAK,CAAEC,QAAS,4BAd7CR,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,GAAAJ,mBAAAW,MAAAC,UAAAA,QAAAC,KAAAjB,EAAA,KAAA,KAAA,GAAA,OAAAG,EAAAG,EAAAY,KAAAZ,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAAAJ,mBAAAW,MAAAI,MAAAA,QAAAC,QAAA,CAAAtB,MAAAI,KAAA,KAAA,GAAA,GAAAI,EAAAY,KAAA,OAAAZ,EAAAI,OAAA,SAAAd,EAAAe,OAAA,KAAAE,KAAA,CAAAQ,SAAA,EAAAP,QAAA,yBAAAR,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAE,KAAA,GAAAJ,mBAAAW,MAAAI,MAAAA,QAAAG,OAAA,CAAAvB,KAAAA,EAAAD,MAAAI,EAAAF,SAAAG,EAAAoB,KAAA,UAAA,KAAA,GAAAnC,EAAAkB,EAAAY,KA0BMtB,EAAIe,OAAO,KAAKE,KAAK,CAAEQ,SAAS,EAAMG,KAAMpC,EAAM0B,QAAS,wEA1BjER,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAmB,GAAAnB,EAAA,MAAA,IA4BMV,EAAIe,OAAO,KAAKE,KAAK,CAAEC,QAAS,mBAAoBY,MAAOpB,EAAAmB,GAAMX,UA5BvE,KAAA,GAAAR,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAZ,EAAAe,OAAA,KAAAE,KAAA,CAAAQ,SAAA,EAAAP,QAAA,uBAAA,KAAA,GAAA,IAAA,MAAA,OAAAR,EAAAqB,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,OAFA,EAAAnD,UAAA,wBAEAkB","file":"register.min.js","sourcesContent":["import { MongoClient } from 'mongodb';\nimport bcrypt from 'bcryptjs';\nimport nodemailer from 'nodemailer';\nimport User from '../../../models/User';\nimport connectDB from '../../../lib/mongoose';\nimport { v4 as uuidv4 } from 'uuid';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst verificationCode = uuidv4();\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: process.env.EMAIL_USERNAME,\n    pass: process.env.EMAIL_PASSWORD,\n  },\n});\n\nconnectDB();\n\nasync function handler(req, res) { \n  if (req.method === \"POST\") {\n    const { email, name, password, retype } = req.body;\n    \n    if (!name || typeof name !== 'string') {\n      return res.status(422).json({ message: 'Please provide a valid name' });\n    }\n\n    const userEmail = email.toLowerCase().trim();\n    if (!userEmail || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(userEmail)) {\n      return res.status(422).json({ message: 'Please enter a correct email address' });\n    }\n\n    if (password !== retype) {\n      return res.status(422).json({ message: 'Passwords do not match' });\n    }\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    try {\n      const existingUser = await User.findOne({ email: userEmail });\n      if (existingUser) {\n        return res.status(400).json({ success: false, message: 'User already exists' });\n      }\n\n      const user = await User.create({ name: name, email: userEmail, password: hashedPassword, role: 'user' });\n      // await sendVerificationEmail(userEmail, verificationCode);\n      res.status(201).json({ success: true, data: user, message: 'Signed up! A verification email has been sent to your email address' });\n    } catch (error) {\n      res.status(500).json({ message: 'User not created', error: error.message });\n    }\n  } else {\n    res.status(405).json({ success: false, message: 'Method not allowed' });\n  }\n}\n\n// async function sendVerificationEmail(email, verificationCode) {\n//   try {\n//     await transporter.sendMail({\n//       from: '\"Retrogold\" <pelumiilupeju@gmail.com>',\n//       to: email,\n//       subject: 'Verify Your Email',\n//       text: `Please click the link below to verify your email:\\nhttp://your-app.com/verify-email?code=${verificationCode}`,\n//       html: `<b>Please click the link below to verify your email:</b><br><a href=\"http://your-app.com/verify-email?code=${verificationCode}\">Verify Email</a>`,\n//     });\n//     console.log('Verification email sent successfully');\n//   } catch (error) {\n//     console.error('Error sending verification email:', error);\n//   }\n// }\n\nexport default handler;\n"]}