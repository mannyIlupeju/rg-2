{"version":3,"sources":["register.js"],"names":["dotenv","config","verificationCode","transporter","nodemailer","createTransport","service","auth","user","process","env","EMAIL_USERNAME","pass","EMAIL_PASSWORD","handler","req","res","method","body","email","name","password","retype","status","json","message","userEmail","toLowerCase","trim","test","bcrypt","hash","hashedPassword","User","findOne","existingUser","success","create","role","data","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEAA,mBAAOC,MAAP;;AAEA,IAAMC,gBAAgB,GAAG,eAAzB;;AAEA,IAAMC,WAAW,GAAGC,uBAAWC,eAAX,CAA2B;AAC7CC,EAAAA,OAAO,EAAE,OADoC;AAE7CC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,cADd;AAEJC,IAAAA,IAAI,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFd;AAFuC,CAA3B,CAApB;;AAQA;;AAEA,SAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBACMD,GAAG,CAACE,MAAJ,KAAe,MADrB;AAAA;AAAA;AAAA;;AAAA,sBAE8CF,GAAG,CAACG,IAFlD,EAEYC,KAFZ,aAEYA,KAFZ,EAEmBC,IAFnB,aAEmBA,IAFnB,EAEyBC,QAFzB,aAEyBA,QAFzB,EAEmCC,MAFnC,aAEmCA,MAFnC;;AAAA,gBAIQ,CAACF,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAJjC;AAAA;AAAA;AAAA;;AAAA,2CAKaJ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CALb;;AAAA;AAQUC,UAAAA,SARV,GAQsBP,KAAK,CAACQ,WAAN,GAAoBC,IAApB,EARtB;;AAAA,gBASQ,CAACF,SAAD,IAAc,CAAC,6BAA6BG,IAA7B,CAAkCH,SAAlC,CATvB;AAAA;AAAA;AAAA;;AAAA,2CAUaV,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAVb;;AAAA;AAAA,gBAaQJ,QAAQ,KAAKC,MAbrB;AAAA;AAAA;AAAA;;AAAA,2CAcaN,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAdb;;AAAA;AAAA;AAAA,0CAgBiCK,qBAAOC,IAAP,CAAYV,QAAZ,EAAsB,EAAtB,CAhBjC;;AAAA;AAgBUW,UAAAA,cAhBV;AAAA;AAAA;AAAA,0CAmBiCC,iBAAKC,OAAL,CAAa;AAAEf,YAAAA,KAAK,EAAEO;AAAT,WAAb,CAnBjC;;AAAA;AAmBYS,UAAAA,YAnBZ;;AAAA,eAoBUA,YApBV;AAAA;AAAA;AAAA;;AAAA,2CAqBenB,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEY,YAAAA,OAAO,EAAE,KAAX;AAAkBX,YAAAA,OAAO,EAAE;AAA3B,WAArB,CArBf;;AAAA;AAAA;AAAA,0CAwByBQ,iBAAKI,MAAL,CAAY;AAAEjB,YAAAA,IAAI,EAAEA,IAAR;AAAcD,YAAAA,KAAK,EAAEO,SAArB;AAAgCL,YAAAA,QAAQ,EAAEW,cAA1C;AAA0DM,YAAAA,IAAI,EAAE;AAAhE,WAAZ,CAxBzB;;AAAA;AAwBY9B,UAAAA,IAxBZ;AAyBM;AACAQ,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEY,YAAAA,OAAO,EAAE,IAAX;AAAiBG,YAAAA,IAAI,EAAE/B,IAAvB;AAA6BiB,YAAAA,OAAO,EAAE;AAAtC,WAArB;AA1BN;AAAA;;AAAA;AAAA;AAAA;AA4BMT,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,kBAAX;AAA+Be,YAAAA,KAAK,EAAE,YAAMf;AAA5C,WAArB;;AA5BN;AAAA;AAAA;;AAAA;AA+BIT,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEY,YAAAA,OAAO,EAAE,KAAX;AAAkBX,YAAAA,OAAO,EAAE;AAA3B,WAArB;;AA/BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;eAEeX,O","sourcesContent":["import { MongoClient } from 'mongodb';\nimport bcrypt from 'bcryptjs';\nimport nodemailer from 'nodemailer';\nimport User from '../../../models/User';\nimport connectDB from '../../../lib/mongoose';\nimport { v4 as uuidv4 } from 'uuid';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst verificationCode = uuidv4();\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: process.env.EMAIL_USERNAME,\n    pass: process.env.EMAIL_PASSWORD,\n  },\n});\n\nconnectDB();\n\nasync function handler(req, res) { \n  if (req.method === \"POST\") {\n    const { email, name, password, retype } = req.body;\n    \n    if (!name || typeof name !== 'string') {\n      return res.status(422).json({ message: 'Please provide a valid name' });\n    }\n\n    const userEmail = email.toLowerCase().trim();\n    if (!userEmail || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(userEmail)) {\n      return res.status(422).json({ message: 'Please enter a correct email address' });\n    }\n\n    if (password !== retype) {\n      return res.status(422).json({ message: 'Passwords do not match' });\n    }\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    try {\n      const existingUser = await User.findOne({ email: userEmail });\n      if (existingUser) {\n        return res.status(400).json({ success: false, message: 'User already exists' });\n      }\n\n      const user = await User.create({ name: name, email: userEmail, password: hashedPassword, role: 'user' });\n      // await sendVerificationEmail(userEmail, verificationCode);\n      res.status(201).json({ success: true, data: user, message: 'Signed up! A verification email has been sent to your email address' });\n    } catch (error) {\n      res.status(500).json({ message: 'User not created', error: error.message });\n    }\n  } else {\n    res.status(405).json({ success: false, message: 'Method not allowed' });\n  }\n}\n\n// async function sendVerificationEmail(email, verificationCode) {\n//   try {\n//     await transporter.sendMail({\n//       from: '\"Retrogold\" <pelumiilupeju@gmail.com>',\n//       to: email,\n//       subject: 'Verify Your Email',\n//       text: `Please click the link below to verify your email:\\nhttp://your-app.com/verify-email?code=${verificationCode}`,\n//       html: `<b>Please click the link below to verify your email:</b><br><a href=\"http://your-app.com/verify-email?code=${verificationCode}\">Verify Email</a>`,\n//     });\n//     console.log('Verification email sent successfully');\n//   } catch (error) {\n//     console.error('Error sending verification email:', error);\n//   }\n// }\n\nexport default handler;\n"],"file":"register.dev.js"}