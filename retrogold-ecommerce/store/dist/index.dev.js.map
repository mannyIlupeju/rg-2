{"version":3,"sources":["index.js"],"names":["initialState","cart","totalPrice","totalQuantity","cartSlice","name","reducers","initializeCart","state","action","payload","map","item","id","reduce","total","quantity","price","addToCart","existingItem","find","push","onRemove","removingItem","filter","toggleCartItemQuantity","existingItemIndex","findIndex","value","splice","store","reducer","actions"],"mappings":"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","sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit'\n\n//Set the state\nconst initialState = {\n    cart: [],\n    totalPrice: 0,\n    totalQuantity: 1\n};\n\n//Create Slice and align it with the cart so it's specific to working on the Cart\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducers: {\n        initializeCart: (state, action) => {\n            state.cart = action.payload.map(item => ({\n                id: item, \n            }));\n            state.totalQuantity = state.cart.reduce((total, item) => total + item.quantity, 0);\n            state.totalPrice = state.cart.reduce((total, item) => total + (item.price * item.quantity), 0);\n        },\n       addToCart: (state, action) => {\n        const existingItem = state.cart.find(item => item.id === action.payload.id);\n        if(existingItem){\n            existingItem.quantity++\n        } else {\n            state.cart.push({...action.payload, quantity: action.payload.quantity || 1})\n        }\n        state.totalQuantity = state.cart.reduce((total, item) => total + item.quantity, 0)\n        state.totalPrice = state.cart.reduce((total, item)=> total + (item.price * item.quantity), 0)\n       },\n       onRemove: (state, action) => {\n        const removingItem = state.cart.find(item => item.id === action.payload.id);\n        if(removingItem){\n           state.cart = state.cart.filter(item => item.id !== removingItem.id)\n           state.totalPrice = state.cart.reduce((total, item) => total + (item.price * item.quantity), 0)\n        } \n       },\n      toggleCartItemQuantity: (state, action) => {\n       const existingItemIndex = state.cart.findIndex((item) => item.id === action.payload.id);\n       if (existingItemIndex !== -1) {\n        const existingItem = state.cart[existingItemIndex];\n\n        // Increase or decrease quantity\n        if (action.payload.value === 'inc') {\n            existingItem.quantity++;\n        } else if (action.payload.value === 'dec') {\n            if (existingItem.quantity > 1) {\n                existingItem.quantity--;\n            } else {\n                // Remove item from cart if quantity is 1 and 'dec' is requested\n                state.cart.splice(existingItemIndex, 1);\n            }\n        }\n\n        // Update totalQuantity and totalPrice\n        state.totalQuantity = state.cart.reduce((total, item) => total + item.quantity, 0);\n        state.totalPrice = state.cart.reduce((total, item) => total + item.price * item.quantity, 0);\n       }\n      }\n\n       \n    },\n});\n\n\n//Create the store\nconst store = configureStore({ reducer: cartSlice.reducer });\n\n\nexport const { addToCart, onRemove, toggleCartItemQuantity, initializeCart } = cartSlice.actions;\n\nexport default store; "],"file":"index.dev.js"}