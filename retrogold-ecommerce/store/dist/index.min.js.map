{"version":3,"sources":["index.js"],"names":["_toolkit","require","_reduxPersist","_storage","_interopRequireDefault","initialState","cart","totalPrice","totalQuantity","cartSlice","createSlice","name","reducers","initializeCart","state","action","payload","map","item","_objectSpread","price","priceV2","quantity","reduce","total","node","addToCart","existingItemIndex","findIndex","id","push","onRemove","removingItem","find","filter","toggleCartItemQuantity","updatedCart","existingItem","value","splice","persistConfig","key","storage","persistedReducer","reducer","store","configureStore","persistor","persistStore","actions"],"mappings":"sMAAA,IAAAA,SAAAC,QAAA,oBACAC,cAAAD,QAAA,iBACAE,SAAAC,uBAAAH,QAAA,kxCAIA,IAAMI,aAAe,CANrBC,KAAA,GAQIC,WAAY,EAPhBC,cAAA,GAYMC,WAAY,EAAAT,SAAAU,aAAY,CAC1BC,KAAM,OACNN,aAAAA,aACAO,SAAU,CACNC,eAAgB,SAACC,EAAOC,GACpBD,EAAMR,KAAOS,EAAOC,QAAQC,IAAI,SAAAC,GAAI,OAAAC,cAAA,GAC7BD,EAD6B,CAEjCE,MAAOF,EAAKG,QACZC,SAAUJ,EAAKI,UAAY,MAE9BR,EAAMN,cAAgBM,EAAMR,KAAKiB,OAAO,SAACC,EAAON,GAAR,OAAiBM,EAAQN,EAAKO,KAAKH,UAAU,GACrFR,EAAMP,WAAaO,EAAMR,KAAKiB,OAAO,SAACC,EAAON,GAAR,OAAiBM,EAASN,EAAKE,MAAQF,EAAKI,UAAW,IAEjGI,UAAW,SAACZ,EAAOC,GAClB,IAAMY,EAAoBb,EAAMR,KAAKsB,UAAU,SAAAV,GAAI,OAAIA,EAAKW,KAAOd,EAAOC,QAAQa,MACxD,IAAvBF,EAvBXb,EAAAR,KAAAqB,GAAAL,UAAAP,EAAAC,QAAAM,UAAA,EACqBR,EAAAR,KAAAwB,KAAAX,cAAA,GAAAJ,EAAAC,QAAA,CAAAM,SAAAP,EAAAC,QAAAM,UAAA,KAGjBd,EAAAA,cAAeM,EAAAR,KAAAiB,OAAA,SAAAC,EAAAN,GAAA,OAAAM,EAAAN,EAAAO,KAAAH,UAAA,GAGnBR,EAAAP,WAAAO,EAAAR,KAAAiB,OAAA,SAAAC,EAAAN,GAAA,OAAAM,EAAAN,EAAAE,MAAAF,EAAAI,UAAA,IAEQS,SADsB,SAAAjB,EAAAC,GAE1BV,IAAY2B,EAFclB,EAAAR,KAAA2B,KAAA,SAAAf,GAAA,OAAAA,EAAAO,KAAAI,KAAAd,EAAAC,QAAAa,KAGlBG,IACJnB,EAAAA,KAAgBC,EAAAR,KAAA4B,OAAA,SAAAhB,GAACJ,OAADI,EAAQH,KAAWc,KAAAG,EAAAP,KAAAI,KAC1Bf,EAALP,WAAoBS,EAAQC,KAAIM,OAAAL,SAAAA,EAAIA,GAAJA,OAAIM,EAAAN,EAAAO,KAAAL,MAAAF,EAAAO,KAAAH,UAAA,KAAAa,uBAAA,SAAArB,EAAAC,GAAvB,IAAbY,EAAAb,EAAAR,KAAAsB,UAAA,SAAAV,GAAA,OAAAA,EAAAW,KAAAd,EAAAC,QAAAa,KAKAf,IAA4BR,IAAvBqB,EAAuBrB,CAAY,IAAA8B,EAAyBlB,mBAAAJ,EAAUQ,MAA3Ee,EAAAD,EAAAT,GACA,QAAAZ,EAAAC,QAAAsB,MARED,EAAAf,WAUYP,QAARA,EAAAC,QAACF,QACe,EAApBa,EAAiBL,SAAgCJ,EAAYH,WAChEY,EAAiBY,OAApBZ,EAA4B,IAGYL,EAAAA,KAAUP,EAmClDD,EAAMN,cAAgB4B,EAAYb,OAAO,SAACC,EAAON,GAAR,OAAiBM,EAAQN,EAAKI,UAAU,GAjCjFR,EAAMN,WAAN4B,EAAiCb,OAAO,SAAAC,EAAAN,GAAA,OAAQA,EAARA,EAAAE,MAAAF,EAAAI,UAAA,QAKxCkB,cAAkB,CAAuBC,IAAA,OAAAC,QAAAA,SAAAA,SAEHC,kBAASlB,EAAAA,cAAAA,gBAAYO,cAArBvB,UAAAmC,SAErCC,OAAA,EAAA7C,SAAA8C,gBAAA,CACDF,QA3BMD,mBA8BwCI,WAAU,EAAA7C,cAAA8C,cAAmBhC,0DA8CJP,UAAUwC,QAA1EvB,6BAAAA,UAAWK,4BAAAA,SAAUI,0CAAAA,uBAAwBtB,kCAAAA,8KA5C9CuB","file":"index.min.js","sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit'\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\n\n//Set the state\nconst initialState = {\n    cart: [],\n    totalPrice: 0,\n    totalQuantity: 1\n};\n\n//Create Slice and align it with the cart so it's specific to working on the Cart\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducers: {\n        initializeCart: (state, action) => {\n            state.cart = action.payload.map(item => ({\n                ...item,\n               price: item.priceV2,\n               quantity: item.quantity || 0 \n            }));\n            state.totalQuantity = state.cart.reduce((total, item) => total + item.node.quantity, 0);\n            state.totalPrice = state.cart.reduce((total, item) => total + (item.price * item.quantity), 0);\n        },\n       addToCart: (state, action) => {\n        const existingItemIndex = state.cart.findIndex(item => item.id === action.payload.id);\n        if(existingItemIndex !== -1){\n            state.cart[existingItemIndex].quantity += action.payload.quantity || 1;\n        } else {\n            state.cart.push({...action.payload, quantity: action.payload.quantity || 1})\n        }\n        state.totalQuantity = state.cart.reduce((total, item) => total + item.node.quantity, 0)\n        state.totalPrice = state.cart.reduce((total, item)=> total + (item.price * item.quantity), 0)\n       },\n       \n       onRemove: (state, action) => {\n        const removingItem = state.cart.find(item => item.node.id === action.payload.id);\n        if(removingItem){\n           state.cart = state.cart.filter(item => item.node.id !== removingItem.node.id)\n           state.totalPrice = state.cart.reduce((total, item) => total + (item.node.price * item.node.quantity), 0)\n        } \n       },\n\n      toggleCartItemQuantity: (state, action) => {\n       const existingItemIndex = state.cart.findIndex((item) => item.id === action.payload.id);\n       if (existingItemIndex !== -1) {\n        const updatedCart = [...state.cart]\n        const existingItem = updatedCart[existingItemIndex];\n\n        // Increase or decrease quantity\n        if (action.payload.value === 'inc') {\n            existingItem.quantity++;\n        } else if (action.payload.value === 'dec') {\n            if (existingItem.quantity > 1) {\n                existingItem.quantity--;\n            } else {\n                // Remove item from cart if quantity is 1 and 'dec' is requested\n                updatedCart.splice(existingItemIndex, 1);\n            }\n        }\n\n        state.cart = updatedCart;\n\n        // Update totalQuantity and totalPrice\n        state.totalQuantity = updatedCart.reduce((total, item) => total + item.quantity, 0);\n        state.totalPrice = updatedCart.reduce((total, item) => total + item.price * item.quantity, 0);\n       }\n      }\n\n       \n    },\n});\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    // Add more configurations like whitelist or blacklist if needed\n};\n\nconst persistedReducer = persistReducer(persistConfig, cartSlice.reducer);\n\n\n//Create the store\n// const store = configureStore({ reducer: cartSlice.reducer });\nconst store = configureStore({\n    reducer: persistedReducer,\n});\n\nexport const persistor = persistStore(store);\n                  \nexport const { addToCart, onRemove, toggleCartItemQuantity, initializeCart } = cartSlice.actions;\n\nexport default store; "]}