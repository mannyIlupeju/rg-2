{"version":3,"sources":["sanity.js"],"names":["_nextSanity","require","_imageUrl","_interopRequireDefault","config","dataset","process","env","NEXT_PUBLIC_SANITY_DATASET","projectId","NEXT_PUBLIC_SANITY_PROJECT_ID","apiVersion","useCdn","token","NEXT_INVENTORY_TOKEN","builder","urlFor","source","image","fetch","then","sanityClient","console","log","products","map","item","_id","productId","product","items","inventory","stock","x","stockQuantity","inStock","error"],"mappings":"+GAAA,IAAAA,YAAAC,QAAA,eACAC,UAAAC,uBAAAF,QAAA,8FAKA,IAAMG,OAAS,CACbC,QAAAC,QAAAC,IAAAC,4BAAA,aAQAC,UAAWH,QAAQC,IAAIG,8BACvBC,WAAY,aACZC,QAAQ,EACRC,MAAOP,QAAQC,IAAIO,sBAiBfC,SAAU,EAAAb,UAAA,SAAgBE,QAEnBY,OAAS,SAACC,GAAD,OAAYF,QAAQG,MAAMD,0BAA1B,IAAYF,cAAcE,EAAAA,YAAAA,cAA1Bb,4CAQnBe,MAAM,yCAJFC,KAAMC,SAAAA,GAMTC,QAAQC,IAAIC,GAHdH,IAAAA,EACOG,EAAAC,IAAA,SAAAC,GAAA,OAAAA,EAAAC,MAELL,QAAQC,IAAIC,aACZI,GAC+B,IAA/BC,EAA+BL,EAAAC,IAAA,SAAAC,GAAA,OAAAA,IAA/BD,IAAA,SAAAK,GAAA,OAAAA,EAAAC,YACAT,QAAQC,IAAIM,GAGqB,IAAAG,EAAAH,EAAAJ,IAAA,SAAAQ,GAAA,OAAAA,EAAAC,gBAAjCZ,QAAAC,IAAA,kBAAAS,GACA,IAAAG,EAAAN,EAAAJ,IAAA,SAAAQ,GAAA,OAAAA,EAAAE,UACAb,QAAQC,IAAIM,YAEZM,KAbF,MAcQH,SAAAA,GAAoBV,QAAOc,MAACF,4BAARE","file":"sanity.min.js","sourcesContent":["import { createClient} from \"next-sanity\"\nimport imageUrlBuilder from '@sanity/image-url'\n\n\n\n\nconst config = {\n  /**\n   * Find your project ID and dataset in `sanity.json` in your studio project.\n   * These are considered “public”, but you can use environment variables\n   * if you want differ between local dev and production.\n   *\n   * https://nextjs.org/docs/basic-features/environment-variables\n   **/\n  dataset: process.env.NEXT_PUBLIC_SANITY_DATASET || \"production\",\n  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  apiVersion: '2022-12-22',\n  useCdn: true,\n  token: process.env.NEXT_INVENTORY_TOKEN,\n  /**\n   * Set useCdn to `false` if your application require the freshest possible\n   * data always (potentially slightly slower and a bit more expensive).\n   * Authenticated request (like preview) will always bypass the CDN\n   **/\n}\n\n/**\n * Set up a helper function for generating Image URLs with only the asset reference data in your documents.\n * Read more: https://www.sanity.io/docs/image-url\n **/\n\n  \n\n\n\nconst builder = imageUrlBuilder(config)\n\nexport const urlFor = (source) => builder.image(source)\n\n\n// Set up the client for fetching data in the getProps page functions\nexport const sanityClient = createClient(config)\n\n// // Retrieve a product with its inventory data\n  sanityClient\n  .fetch('*[_type == \"product\"]{_id, inventory}')\n  .then((products) => {\n    console.log(products)\n    //product Id\n    const productId = products.map((item) => item._id)\n    console.log('productId:', productId);\n\n    //Products - Inventory and Stock\n    const productInfo = products.map((item) => item);\n    const product = (productInfo.map((items)=> items.inventory))\n    console.log(product)\n\n    //Inventory stock\n    const stock = product.map((x)=> x.stockQuantity)\n    console.log('Stock Quantity:', stock);\n\n    //In stock information\n    const inStock = product.map((x)=> x.inStock)\n    console.log('In Stock:', inStock);\n  })\n  .catch((error) => {\n    console.error('Error retrieving product:', error);\n  });\n\n  \n\n  "]}