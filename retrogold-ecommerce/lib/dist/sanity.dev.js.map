{"version":3,"sources":["sanity.js"],"names":["config","dataset","process","env","NEXT_PUBLIC_SANITY_DATASET","projectId","NEXT_PUBLIC_SANITY_PROJECT_ID","apiVersion","useCdn","token","NEXT_INVENTORY_TOKEN","builder","urlFor","source","image","sanityClient","fetch","then","products","console","log","productId","map","item","_id","productInfo","product","items","inventory","stock","x","stockQuantity","inStock","error"],"mappings":";;;;;;;AAAA;;AACA;;;;AAKA,IAAMA,MAAM,GAAG;AACb;;;;;;;AAOAC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,0BAAZ,IAA0C,YARtC;AASbC,EAAAA,SAAS,EAAEH,OAAO,CAACC,GAAR,CAAYG,6BATV;AAUbC,EAAAA,UAAU,EAAE,YAVC;AAWbC,EAAAA,MAAM,EAAE,IAXK;AAYbC,EAAAA,KAAK,EAAEP,OAAO,CAACC,GAAR,CAAYO;AACnB;;;;;;AAba,CAAf;AAoBA;;;;;AASA,IAAMC,OAAO,GAAG,0BAAgBX,MAAhB,CAAhB;;AAEO,IAAMY,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD;AAAA,SAAYF,OAAO,CAACG,KAAR,CAAcD,MAAd,CAAZ;AAAA,CAAf,C,CAGP;;;;AACO,IAAME,YAAY,GAAG,8BAAaf,MAAb,CAArB,C,CAEP;;;AACEe,YAAY,CACXC,KADD,CACO,uCADP,EAECC,IAFD,CAEM,UAACC,QAAD,EAAc;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EADkB,CAElB;;AACA,MAAMG,SAAS,GAAGH,QAAQ,CAACI,GAAT,CAAa,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,GAAf;AAAA,GAAb,CAAlB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,SAA1B,EAJkB,CAMlB;;AACA,MAAMI,WAAW,GAAGP,QAAQ,CAACI,GAAT,CAAa,UAACC,IAAD;AAAA,WAAUA,IAAV;AAAA,GAAb,CAApB;AACA,MAAMG,OAAO,GAAID,WAAW,CAACH,GAAZ,CAAgB,UAACK,KAAD;AAAA,WAAUA,KAAK,CAACC,SAAhB;AAAA,GAAhB,CAAjB;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAYM,OAAZ,EATkB,CAWlB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAACJ,GAAR,CAAY,UAACQ,CAAD;AAAA,WAAMA,CAAC,CAACC,aAAR;AAAA,GAAZ,CAAd;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BS,KAA/B,EAbkB,CAelB;;AACA,MAAMG,OAAO,GAAGN,OAAO,CAACJ,GAAR,CAAY,UAACQ,CAAD;AAAA,WAAMA,CAAC,CAACE,OAAR;AAAA,GAAZ,CAAhB;AACAb,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBY,OAAzB;AACD,CApBD,WAqBO,UAACC,KAAD,EAAW;AAChBd,EAAAA,OAAO,CAACc,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACD,CAvBD","sourcesContent":["import { createClient} from \"next-sanity\"\nimport imageUrlBuilder from '@sanity/image-url'\n\n\n\n\nconst config = {\n  /**\n   * Find your project ID and dataset in `sanity.json` in your studio project.\n   * These are considered “public”, but you can use environment variables\n   * if you want differ between local dev and production.\n   *\n   * https://nextjs.org/docs/basic-features/environment-variables\n   **/\n  dataset: process.env.NEXT_PUBLIC_SANITY_DATASET || \"production\",\n  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  apiVersion: '2022-12-22',\n  useCdn: true,\n  token: process.env.NEXT_INVENTORY_TOKEN,\n  /**\n   * Set useCdn to `false` if your application require the freshest possible\n   * data always (potentially slightly slower and a bit more expensive).\n   * Authenticated request (like preview) will always bypass the CDN\n   **/\n}\n\n/**\n * Set up a helper function for generating Image URLs with only the asset reference data in your documents.\n * Read more: https://www.sanity.io/docs/image-url\n **/\n\n  \n\n\n\nconst builder = imageUrlBuilder(config)\n\nexport const urlFor = (source) => builder.image(source)\n\n\n// Set up the client for fetching data in the getProps page functions\nexport const sanityClient = createClient(config)\n\n// // Retrieve a product with its inventory data\n  sanityClient\n  .fetch('*[_type == \"product\"]{_id, inventory}')\n  .then((products) => {\n    console.log(products)\n    //product Id\n    const productId = products.map((item) => item._id)\n    console.log('productId:', productId);\n\n    //Products - Inventory and Stock\n    const productInfo = products.map((item) => item);\n    const product = (productInfo.map((items)=> items.inventory))\n    console.log(product)\n\n    //Inventory stock\n    const stock = product.map((x)=> x.stockQuantity)\n    console.log('Stock Quantity:', stock);\n\n    //In stock information\n    const inStock = product.map((x)=> x.inStock)\n    console.log('In Stock:', inStock);\n  })\n  .catch((error) => {\n    console.error('Error retrieving product:', error);\n  });\n\n  \n\n  "],"file":"sanity.dev.js"}